{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Fedora/adb_mirror/","title":"Adb mirror","text":""},{"location":"Fedora/adb_mirror/#adb-mirror","title":"ADB mirror","text":"<p>This is my current configuration for my Samsung Galaxy A70 phone. </p> <p>scrcpy</p> Installation<pre><code>sudo apt install scrcpy\n</code></pre> Running scrcpy, disabling phone screen<pre><code>scrcpy -b15M --max-size 1920 --stay-awake --turn-screen-off\n</code></pre>"},{"location":"Markdown/Markdown_Tests/","title":"Markdown Tests","text":"<p><pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{ priority: 'Low' }\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{priority:'lw'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{priority:'ow'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{priority:'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{priority:'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{priority:'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{ priority:'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@ priority:'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{ priority:'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{ priority: 'Low'}\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git]@{ priority: 'Low' }\n  vspglb2o[Done]</code></pre> <pre><code>kanban\n  %% Board: DEP\n  xtjtw5lz[Todo]\n    rcdrd8oe[patch mkdocs for security]\n      a1bo2sac[teste]\n      p4wd5i62[teste2]\n  iv9cqekt[Work in progress]\n    hwkj9spv[encrypt git] @{ priority: 'Low' }\n  vspglb2o[Done]</code></pre> <pre><code>```mermaid\nkanban\n  Todo\n    [Create Documentation]\n    docs[Create Blog about the new diagram]\n  [In progress]\n    id6[Create renderer so that it works in all cases. We also add som extra text here for testing purposes. And some more just for the extra flare.]\n  id9[Ready for deploy]\n    id8[Design grammar]@{ assigned: 'knsv' }\n  id10[Ready for test]\n    id4[Create parsing tests]@{ ticket: MC-2038, assigned: 'K.Sveidqvist', priority: 'High' }\n    id66[last item]@{ priority: 'Very Low', assigned: 'knsv' }\n  id11[Done]\n    id5[define getData]\n    id2[Title of diagram is more than 100 chars when user duplicates diagram with 100 char]@{ ticket: MC-2036, priority: 'Very High'}\n    id3[Update DB function]@{ ticket: MC-2037, assigned: knsv, priority: 'High' }\n\n  id12[Can't reproduce]\n    id3[Weird flickering in Firefox]\n</code></pre></p>"},{"location":"Markdown/Markdown_Tests/#icon-search","title":"Icon Search","text":"<p> Tip: Enter some keywords to find icons and emojis and click on the   shortcode to copy it to your clipboard. </p>"},{"location":"Markdown/Markdown_Tests/#annotations","title":"Annotations","text":"ResultCode <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, \u2026 basically anything that can be expressed in Markdown.</li> </ol> <pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre>"},{"location":"Markdown/Markdown_Tests/#math","title":"Math","text":"ResultCode <pre>\\[\n\\int_0^\\infty \\frac{x^3}{e^x} \\, dx = \\frac{\\pi^4}{15}\n\\]</pre> <pre><code>$$\n\\int_0^\\infty \\frac{x^3}{e^x} \\, dx = \\frac{\\pi^4}{15}\n$$\n</code></pre>"},{"location":"Markdown/Markdown_Tests/#code","title":"Code","text":"ResultCode <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>  ``` c++\n  #include &lt;iostream&gt;\n\n  int main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n  }\n  ```\n</code></pre>"},{"location":"Markdown/Markdown_Tests/#mermaid","title":"Mermaid","text":"ResultCode <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>  ``` mermaid\n  graph LR\n    A[Start] --&gt; B{Error?};\n    B --&gt;|Yes| C[Hmm...];\n    C --&gt; D[Debug];\n    D --&gt; B;\n    B ----&gt;|No| E[Yay!];\n  ```\n</code></pre>"},{"location":"Markdown/Markdown_Tests/#tabs","title":"Tabs","text":"Result <p>=== \"Bash\"</p> <pre><code>  ```bash\n  #!/bin/bash\n\n  echo \"Hello world!\"\n  ```\n</code></pre> <p>=== \"Explanation\"</p> <pre><code>  This is only a short example of how to make tabs.\n</code></pre> Code <pre><code>  === \"Bash\"\n\n      ```bash\n      #!/bin/bash\n\n      echo \"Hello world!\"\n      ```\n\n  === \"Explanation\"\n\n      This is only a short example of how to make tabs.\n</code></pre>"},{"location":"Markdown/Markdown_Tests/#lists","title":"Lists","text":"ResultCode <ul> <li> text</li> <li> text</li> <li> <p> text</p> </li> <li> <p>First item</p> </li> <li>Second item</li> <li> <p>Third item</p> </li> <li> <p>Unordered item 1</p> </li> <li>Unordered item 2</li> <li>Unordered item 3</li> </ul> <pre><code>  - [x] text\n  - [x] text\n  - [ ] text\n\n  1. First item\n  2. Second item\n  3. Third item\n\n  * Unordered item 1\n  * Unordered item 2\n  * Unordered item 3\n</code></pre>"},{"location":"Markdown/Markdown_Tests/#code_1","title":"Code","text":"Result <p>```python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)):     for j in range(len(items) - 1 - i):         if items[j] &gt; items[j + 1]:             items[j], items[j + 1] = items[j + 1], items[j]</p> <p>```</p> Code <pre><code>  ```python title=\"Bubble sort\" hl_lines=\"3 4\"\n  \"\"\" Bubble sort \"\"\"\n  def bubble_sort(items):\n  for i in range(len(items)):\n      for j in range(len(items) - 1 - i):\n          if items[j] &gt; items[j + 1]:\n              items[j], items[j + 1] = items[j + 1], items[j]\n  ```\n</code></pre> <p> <p>0%</p> <p>5%</p> <p>25%</p> <p>45%</p> <p>65%</p> <p>85%</p> <p>100% ready</p> </p> <p> <p></p> </p> <p>blockdiag {     A -&gt; B -&gt; C -&gt; D;     A -&gt; E -&gt; F -&gt; G; }</p> <p>blockdiag {    A [label = \"foo\"];    B [label = \"bar\"];    C [label = \"baz\"];</p> <p>A -&gt; B [label = \"click bar\", textcolor=\"red\"];    B -&gt; C [label = \"click baz\"];    C -&gt; A; }</p> <p>blockdiag {    // Set labels to nodes.    A [label = \"foo\"];    B [label = \"bar\"];    // And set text-color    C [label = \"baz\"];</p> <p>// Set labels to edges. (short text only)    A -&gt; B [label = \"click bar\", textcolor=\"red\"];    B -&gt; C [label = \"click baz\"];    C -&gt; A; }</p> <pre><code>blockdiag {\n   // Set boder-style, backgroun-color and text-color to nodes.\n   A [style = dotted];\n   B [style = dashed];\n   C [color = pink, style = \"3,3,3,3,15,3\"]; //dashed_array format style\n   D [color = \"#888888\", textcolor=\"#FFFFFF\"];\n   // Set border-style and color to edges.\n   A -&gt; B [style = dotted];\n   B -&gt; C [style = dashed];\n   C -&gt; D [color = \"red\", style = \"3,3,3,3,15,3\"]; //dashed_array format style\n   // Set numbered-badge to nodes.\n   E [numbered = 99];\n   // Set arrow direction to edges.\n   E -&gt; F [dir = none];\n   F -&gt; G [dir = forward];\n   G -&gt; H [dir = back];\n   H -&gt; I [dir = both];\n   // Set width and height to nodes.\n   K [width = 192]; // default value is 128\n   L [height = 64]; // default value is 40\n   // Use thick line\n   J -&gt; K [thick]\n   K -&gt; L;\n}\n</code></pre> <p>blockdiag {   // branching edges to multiple children   A -&gt; B, C;   // branching edges from multiple parents   D, E -&gt; F; }</p> <p>Ctrl\uff0bAlt\uff0bDel</p>"},{"location":"Markdown/macros/","title":"Macros","text":"ResultCode <p>3.14159</p> <pre><code>{{ pi_calculator() }}\n</code></pre> Name Age City Alice 25 New York Bob 30 Los Angeles Charlie 35 Chicago"},{"location":"Markdown/macros/#monday-september-29-2025","title":"Monday, September 29, 2025","text":""},{"location":"Markdown/macros/#lisbon","title":"Lisbon","text":"<p>Current Conditions:  Clear</p> <p> Temperature: +17\u00b0C</p> <p> Wind: \u219814km/h</p> <p> Humidity: 88%</p>"},{"location":"Markdown/macros/#how-to-setup","title":"How to setup:","text":"<ol> <li>Create a <code>main.py</code> file in the root of the project.</li> <li>Add the following code to the file:</li> </ol> main.py<pre><code>def define_env(env):\n    \"\"\"\n    This is the hook for defining variables, macros and filters\n    \"\"\"\n\n    # Example macro\n    @env.macro\n    def pi_calculator():\n        return \"3.14159\"\n\n    # You can also define variables\n    env.variables.update({\"version\": \"1.0\", \"author\": \"Hugo Lima\"})\n</code></pre> <ol> <li>Add the following to the <code>mkdocs.yml</code> file:</li> </ol> <p>mkdocs.yml<pre><code>plugins:\n     - macros:\n         render_by_default: false\n</code></pre> 4. Use the macro in your markdown files like this:</p> Markdown_Tests.md<pre><code>---\nrender_macros: true\n---\n\n{{ pi_calculator() }}\n</code></pre>"},{"location":"Markdown/markdown-cheat-sheet/","title":"Markdown cheat sheet","text":""},{"location":"Markdown/markdown-cheat-sheet/#markdown-equations","title":"Markdown Equations","text":"<p>\u00c9 possivel escrever equa\u00e7\u00f5es em MarkDown no formato LaTeX:</p> <ul> <li><code>$\\sqrt{25}=5$</code> \\(\\rightarrow\\) \\(\\sqrt{25}=5\\) </li> </ul>"},{"location":"Markdown/markdown-cheat-sheet/#markdown-no-vscode","title":"Markdown no VSCode","text":"<ul> <li><code>Ctrl+Shift+V</code> - Ativa o preview do VSCode</li> <li><code>Ctrl+\\</code> - Split screen</li> <li><code>Ctrl+J</code> - Abre terminal </li> <li><code>Ctrl+Space</code> - Aparece um pop up muito util das snippets do VSCode</li> <li><code>Ctrl+Shift+P: Snippet Ranger</code> - Extens\u00e3o muito util para usar snippets, e d\u00e1 para criar os teus pr\u00f3prios. </li> </ul>"},{"location":"Markdown/markdown-cheat-sheet/#markdown-all-in-one-extension","title":"Markdown All in One Extension","text":"<p> Command Usage <code>Ctrl + B</code> Toggle bold <code>Ctrl + I</code> Toggle italic <code>Alt+S (on Windows)</code> Toggle strikethrough1 <code>Ctrl + Shift + ]</code> Toggle heading (uplevel) <code>Ctrl + Shift + [</code> Toggle heading (downlevel) <code>Ctrl/Cmd + M</code> Toggle math environment <code>Alt + C</code> Check/Uncheck task list item <code>Ctrl/Cmd + Shift + V</code> Toggle preview <code>Ctrl/Cmd + K V</code> Toggle preview to side <code>Alt*Shift+F</code> Align Table <p></p>"},{"location":"Markdown/markdown-cheat-sheet/#class-diagram-example--uml","title":"Class Diagram Example / UML","text":"UML Image made with Mermaid"},{"location":"Markdown/markdown-cheat-sheet/#mkdocs-usage","title":"Mkdocs Usage","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Mete o que escreves no GitPages (este site)</li> </ul>"},{"location":"Markdown/markdown-cheat-sheet/#admonitions","title":"Admonitions","text":"<p>Cenas bu\u00e9 \u00fateis quando queremos chamar a aten\u00e7\u00e3o para alguma cena. Eye catching! </p> Admonitions Examples <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Normal<pre><code>!!! note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Com titulo mudado<pre><code>!!! note \"Phasellus posuere in sem ut cursus\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Sem t\u00edtulo<pre><code>!!! note \"\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Hidden<pre><code>??? note \n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Expanded<pre><code>???+ note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre>"},{"location":"Markdown/markdown-cheat-sheet/#admonition-types","title":"Admonition Types","text":"Note <p><code>note</code></p> Abstract <p><code>abstract</code>, <code>summary</code>,<code>tldr</code></p> Info <p><code>info</code>,<code>todo</code></p> Tip <p><code>tip</code>,<code>hint</code>, <code>important</code></p> Success <p><code>success</code>,<code>done</code>,<code>check</code></p> Question <p><code>question</code>,<code>help</code>,<code>faq</code></p> Warning <p><code>warning</code>,<code>caution</code>,<code>attention</code></p> Failure <p><code>failure</code>,<code>fail</code>,<code>missing</code></p> Danger <p><code>error</code>,<code>danger</code></p> Bug <p><code>bug</code></p> Example <p><code>example</code></p> Quote <p><code>quote</code></p> <p> </p>"},{"location":"Markdown/markdown-cheat-sheet/#but\u00f5es","title":"But\u00f5es","text":"<p> <p>Tamb\u00e9m d\u00e1 para meter but\u00f5es</p> <p></p> C\u00f3digo para But\u00e3o <pre><code>[Tamb\u00e9m d\u00e1 para meter but\u00f5es](https://python-markdown.github.io/extensions/attr_list/){ .md-button .md-button--primary }\n</code></pre>"},{"location":"Markdown/markdown-cheat-sheet/#markdown-cheat-sheet","title":"Markdown Cheat Sheet","text":"<p>Thanks for visiting The Markdown Guide!</p> <p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can't cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.</p>"},{"location":"Markdown/markdown-cheat-sheet/#basic-syntax","title":"Basic Syntax","text":"<p>These are the elements outlined in John Gruber's original design document. All Markdown applications support these elements.</p>"},{"location":"Markdown/markdown-cheat-sheet/#heading","title":"Heading","text":""},{"location":"Markdown/markdown-cheat-sheet/#h1","title":"H1","text":""},{"location":"Markdown/markdown-cheat-sheet/#h2","title":"H2","text":""},{"location":"Markdown/markdown-cheat-sheet/#h3","title":"H3","text":""},{"location":"Markdown/markdown-cheat-sheet/#bold","title":"Bold","text":"<p>bold text</p>"},{"location":"Markdown/markdown-cheat-sheet/#italic","title":"Italic","text":"<p>italicized text</p>"},{"location":"Markdown/markdown-cheat-sheet/#blockquote","title":"Blockquote","text":"<p>blockquote</p>"},{"location":"Markdown/markdown-cheat-sheet/#ordered-list","title":"Ordered List","text":"<ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"Markdown/markdown-cheat-sheet/#unordered-list","title":"Unordered List","text":"<ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul>"},{"location":"Markdown/markdown-cheat-sheet/#code","title":"Code","text":"<p><code>code</code></p>"},{"location":"Markdown/markdown-cheat-sheet/#horizontal-rule","title":"Horizontal Rule","text":""},{"location":"Markdown/markdown-cheat-sheet/#link","title":"Link","text":"<p>Markdown Guide</p>"},{"location":"Markdown/markdown-cheat-sheet/#image","title":"Image","text":""},{"location":"Markdown/markdown-cheat-sheet/#extended-syntax","title":"Extended Syntax","text":"<p>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.</p>"},{"location":"Markdown/markdown-cheat-sheet/#table","title":"Table","text":"Syntax Description Header Title Paragraph Text"},{"location":"Markdown/markdown-cheat-sheet/#fenced-code-block","title":"Fenced Code Block","text":"<pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre>"},{"location":"Markdown/markdown-cheat-sheet/#footnote","title":"Footnote","text":"<p>Here's a sentence with a footnote. <sup>1</sup></p>"},{"location":"Markdown/markdown-cheat-sheet/#heading-id","title":"Heading ID","text":""},{"location":"Markdown/markdown-cheat-sheet/#my-great-heading","title":"My Great Heading","text":""},{"location":"Markdown/markdown-cheat-sheet/#definition-list","title":"Definition List","text":"term definition"},{"location":"Markdown/markdown-cheat-sheet/#strikethrough","title":"Strikethrough","text":"<p>The world is flat.</p>"},{"location":"Markdown/markdown-cheat-sheet/#task-list","title":"Task List","text":"<ul> <li> Write the press release</li> <li> Update the website</li> <li> Contact the media</li> </ul>"},{"location":"Markdown/markdown-cheat-sheet/#emoji","title":"Emoji","text":"<p>That is so funny! </p> <p>(See also Copying and Pasting Emoji)</p>"},{"location":"Markdown/markdown-cheat-sheet/#highlight","title":"Highlight","text":"<p>I need to highlight these very important words.</p>"},{"location":"Markdown/markdown-cheat-sheet/#subscript","title":"Subscript","text":"<p>H<sub>2</sub>O</p>"},{"location":"Markdown/markdown-cheat-sheet/#superscript","title":"Superscript","text":"<p>X<sup>2</sup></p> <ol> <li> <p>This is the footnote.\u00a0\u21a9</p> </li> </ol>"},{"location":"Markdown/mkdocs-macro/","title":"mkdocs-macro","text":"<p>Esta cena permite basicamente ter fun\u00e7\u00f5es Python a rodar em Markdown. Loco.</p>"},{"location":"Markdown/mkdocs-macro/#macro","title":"Macro","text":"<p>Defini\u00e7\u00e3o de macro, segundo o mkdocs-macro</p> <p>A macro is, simply stated, a Python function with arguments that returns a string.</p> <p>Macros are called from markdown pages. The result of each call to a macro is then embedded into the page, before mkdocs renders that page into a HTML page.</p> <p>A macro may contain all the logic required; it could be as simple as a button, or as sophisticated as making a query from a database and formatting the results as markdown or HTML.</p> <p>Macros bring to mkdocs the power and flexibility of macros from wiki engines, without their complexity.</p> <p>Source</p> <p>Macros</p> <p>\"A macro is, simply stated, a Python function with arguments that returns a string.\" Esta string pode ser c\u00f3digo Markdown! Ou HTML!</p>"},{"location":"Markdown/mkdocs-macro/#macro-global","title":"Macro Global","text":"<p>Fazes no <code>main.py</code>.</p>"},{"location":"Markdown/mkdocs-macro/#macro-local---linguagem-jinja2","title":"Macro Local - Linguagem Jinja2","text":"<p>Exemplo da documenta\u00e7\u00e3o oficial da Jinja2</p> <pre><code>{.% macro input(name, value='', type='text', size=20) -%}\n    &lt;input type=\"{{ type }}\" name=\"{{ name }}\" value=\"{{\n        value|e }}\" size=\"{{ size }}\"&gt;\n{.%- endmacro %}\n</code></pre> <p>E na p\u00e1gina podemos usar esse mesmo macro:</p> <pre><code>&lt;p&gt;{.{ input('username') }}&lt;/p&gt;\n&lt;p&gt;{.{ input('password', type='password') }}&lt;/p&gt;\n</code></pre> <p>Resultado: </p> <p>{% macro input(name, value='', type='text', size=20) -%}     </p> <p> <p>{{ input('username') }}</p> <p>{{ input('password', type='password') }}</p> <p></p>"},{"location":"Markdown/mkdocs-macro/#filter","title":"Filter","text":""},{"location":"Markdown/mkdocs-macro/#vari\u00e1veis","title":"Vari\u00e1veis","text":""},{"location":"Markdown/mkdocs-macro/#vari\u00e1veis-globais","title":"Vari\u00e1veis Globais","text":"<p>Nas configura\u00e7\u00f5es do mkdocs.yml:</p> <pre><code>extra:\n    price: 12.50\n    company:\n        name: Acme\n        address: ....\n        website: www.acme.com\n</code></pre> <p>E depois pode-se usar globalmente as vari\u00e1veis nos ficheiros markdown assim: </p> <pre><code>The price of the product is {price}.\n\nSee [more information on the website]({company.website }).\n\nSee &lt;a href=\"{company.website}\"&gt;more information on the website&lt;/a&gt;.\n</code></pre>"},{"location":"Markdown/mkdocs-macro/#vari\u00e1veis-locais","title":"Vari\u00e1veis locais","text":"<p>S\u00e3o definidas dentro do documento Markdown:</p> <pre><code>{.% set acme = 'Acme Company Ltd' %.} # Sem ponto!\n\nPlease buy the great products from {{ acme }}!\n</code></pre>"},{"location":"Markdown/mkdocs-macro/#mkdocsyml","title":"mkdocs.yml","text":""},{"location":"Markdown/mkdocs-macro/#mainpy-exemplo","title":"main.py (exemplo)","text":"main.py <pre><code>\"\"\"\nBasic example of a Mkdocs-macros module\n\"\"\"\n\nimport math\n\ndef define_env(env):\n    \"\"\"\n    This is the hook for defining variables, macros and filters\n\n    - variables: the dictionary that contains the environment variables\n    - macro: a decorator function, to declare a macro.\n    - filter: a function with one of more arguments,\n        used to perform a transformation\n    \"\"\"\n\n    # add to the dictionary of variables available to markdown pages:\n    env.variables['baz'] = \"John Doe\"\n\n    # NOTE: you may also treat env.variables as a namespace,\n    #       with the dot notation:\n    env.variables.baz = \"John Doe\"\n\n    @env.macro\n    def bar(x):\n        return (2.3 * x) + 7\n\n    # If you wish, you can  declare a macro with a different name:\n    def f(x):\n        return x * x\n    env.macro(f, 'barbaz')\n\n    # or to export some predefined function\n    env.macro(math.floor) # will be exported as 'floor'\n\n    # create a jinja2 filter\n    @env.filter\n    def reverse(x):\n        \"Reverse a string (and uppercase)\"\n        return x.upper()[::-1]\n</code></pre> Mudar o nome do main.py <p>Para isto temos de adicionar isto no mkdocs.yml, neste caso o nome do ficheiro .py seria \"source_code\":</p> <pre><code>plugins:\n    ...\n    - macros:\n         module_name: source_code\n</code></pre>"},{"location":"Markdown/mkdocs-macro/#testes","title":"testes","text":"<p>{{ git.short_commit}} ({{ git.date}}) by {{ git.author}}</p> <p>{{ git.raw }}</p> <p>{{ git.date.strftime(\"%b %d, %Y %H:%M:%S\") }}</p> <p>{{ context(git)| pretty }}</p>"},{"location":"Programming/GitHub/","title":"GitHub","text":""},{"location":"Programming/GitHub/#token-novo","title":"Token Novo:","text":"<p>Dentro do reposit\u00f3rio local: </p> <pre><code>git remote set-url origin https://username:token@github.com/username/repository.git\n</code></pre>"},{"location":"Programming/data_types/","title":"Data types","text":""},{"location":"Programming/data_types/#data-types","title":"Data Types","text":"<p> <pre>\\[\n1 byte (B) = 8 bits\n\\]</pre> Data Type Size Description byte 1 byte Stores whole numbers from -128 to 127 short 2 bytes Stores whole numbers from -32,768 to 32,767 int 4 bytes Stores whole numbers from -2,147,483,648 to 2,147,483,647 long 8 bytes Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 float 4 bytes Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits double 8 bytes Stores fractional numbers. Sufficient for storing 15 decimal digits boolean 1 bit Stores true or false values char 2 bytes Stores a single character/letter or ASCII values <p></p>"},{"location":"Programming/data_types/#byte","title":"Byte","text":"<p>The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127.</p>"},{"location":"Programming/data_types/#short","title":"Short","text":"<p>The short data type can store whole numbers from -32768 to 32767.</p>"},{"location":"Programming/data_types/#int","title":"Int","text":"<p>The int data type can store whole numbers from -2147483648 to 2147483647. In general, the int data type is the preferred data type when we create variables with a numeric value.</p>"},{"location":"Programming/data_types/#long","title":"Long","text":"<p>The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\" (Java):</p> <pre><code>(java)\nlong myNum = 15000000000L;\n</code></pre>"},{"location":"Programming/data_types/#floating-point-types","title":"Floating Point Types","text":"<p>You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.</p> <p>The float and double data types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles:</p> <pre><code>(java)\ndouble myNum = 19.99d;\nfloat myNum = 5.75f;\n</code></pre>"},{"location":"Programming/data_types/#scientific-numbers","title":"Scientific Numbers","text":"<p>A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:</p> <pre><code>float f1 = 35e3f;\n</code></pre>"},{"location":"Programming/prog_index/","title":"Prog index","text":"<p>Java Data Types</p>"},{"location":"Programming/Java/java_basics/","title":"Java basics","text":"<p> <p> </p> <p></p>"},{"location":"Programming/Java/java_basics/#java-rules","title":"Java \"Rules\"","text":"<ul> <li>Java is case-sensitive: \"MyClass\" and \"myclass\" has different meaning.</li> <li>Every line of code that runs in Java must be inside a class.</li> <li>A class should always start with an uppercase first letter.</li> <li>The name of the java file must match the class name.</li> </ul>"},{"location":"Programming/Java/java_basics/#strings","title":"Strings","text":""},{"location":"Programming/Java/java_basics/#string-length","title":"String Length","text":"<p>Retorna o tamanho da String. <pre><code>String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nSystem.out.println(\"The length of the txt string is: \" + txt.length());\n</code></pre></p>"},{"location":"Programming/Java/java_basics/#touppercase--tolowercase","title":"toUpperCase() &amp; toLowerCase()","text":"<pre><code>String txt = \"Hello World\";\nSystem.out.println(txt.toUpperCase());   // Outputs \"HELLO WORLD\"\nSystem.out.println(txt.toLowerCase());   // Outputs \"hello world\"\n</code></pre>"},{"location":"Programming/Java/java_basics/#indexof","title":"indexOf()","text":"<pre><code>String txt = \"Please locate where 'locate' occurs!\";\nSystem.out.println(txt.indexOf(\"locate\")); // Outputs 7\n</code></pre>"},{"location":"Programming/Java/java_basics/#string-concatenation","title":"String Concatenation","text":"<p>Existem 2 m\u00e9todos:  <pre><code>String firstName = \"John\";\nString lastName = \"Doe\";\nSystem.out.println(firstName + \" \" + lastName);\n</code></pre> <pre><code>String firstName = \"John \";\nString lastName = \"Doe\";\nSystem.out.println(firstName.concat(lastName));\n</code></pre> Nota: Se adicionarmos um n\u00famero e uma string, o resultado ser\u00e1 uma string concatenation. (o inteiro passa a string). <pre><code>String x = \"10\";\nint y = 20;\nString z = x + y;  // z will be 1020 (a String)\n</code></pre></p>"},{"location":"Programming/Java/java_basics/#java-math","title":"Java Math","text":"<p> M\u00e9todo Descri\u00e7\u00e3o <code>Math.max(x,y)</code> Retorna valor m\u00e1ximo entre x e y <code>Math.min(x,y)</code> Retorna valor minimo entre x e y <code>Math.sqrt(x)</code> Retorna a raiz quadrada de <code>x</code> <code>Math.abs(x)</code> Retorna o m\u00f3dulo de <code>x</code> <code>Math.random()</code> Retorna um numero entre 0.0 (inclusive) e 1.0 <p></p>"},{"location":"Programming/Java/java_basics/#short-ifelse","title":"Short If..Else","text":"<p><pre><code>variable = (condition) ? expressionTrue :  expressionFalse;\n</code></pre> <pre><code>int time = 20;\nString result = (time &lt; 18) ? \"Good day.\" : \"Good evening.\";\nSystem.out.println(result);\n</code></pre></p>"},{"location":"Programming/Java/java_basics/#for-each-loop","title":"For Each Loop","text":"<p><pre><code>for (type variableName : arrayName) {\n  // code block to be executed\n}\n</code></pre> <pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (String i : cars) {\n  System.out.println(i);\n}\n</code></pre></p>"},{"location":"Programming/Java/java_basics/#multidimensional-arrays","title":"Multidimensional Arrays","text":"<pre><code>class apples{\n    public static void main(String[] args) {\n        int firstarray[][] = {{8,9,10,11},{12,13,14,15}};\n        int secondarray[][]={{30,31,32,33},{34},{35,36}}\n\n        System.out.println(\"This is the first array\");\n        display(firstarray);\n        System.out.println(\"This is the second array\");\n        display(secondarray);\n    }\n    //cicle through the array\n    public static void display(int x[][] /*receives the multidimensional array like this*/) {\n        for(int row=0; row &lt; x.length; row++){ \n            //x.length gives the number the arrays the MD array has.\n            // firstarray.length=2, second array.length=3\n            //ou seja, isto diz quantas linhas \u00e9 que o MD array tem\n            for(int col=0; col&lt;x[row].length; col++){\n                //se fizermos firstarray[0].length = 4, logo temos\n                //4 colunas olhando para a primeira linha do MD Array\n                System.out.print(x[row][col]+\"\\t\");\n            }\n            System.out.println(); //new line (mete um \\n basically)\n        }\n    }\n}\n</code></pre>"},{"location":"Programming/Java/java_basics/#classes-and-objects","title":"Classes and Objects","text":"<p>Classes and objects are the two main aspects of object-oriented programming.</p> <p> </p> <p>So, a class is a template for objects, and an object is an instance of a class.</p> <p>When the individual objects are created, they inherit all the variables and methods from the class.</p> <p>"},{"location":"Programming/Java/java_basics/#class","title":"Class","text":"<p>Class named  \"Main\" with a variable x:</p> <pre><code>public class Main {\n  int x = 5;\n}\n</code></pre> <p>"},{"location":"Programming/Java/java_basics/#object","title":"Object","text":"<p>Um objeto \u00e9 criado a partir de uma classe. Neste caso vamos criar um objeto da classe Main chamado myObj.</p> <p><pre><code>public class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj1 = new Main();  // Object 1\n    Main myObj2 = new Main();  // Object 2\n    System.out.println(myObj1.x);\n    System.out.println(myObj2.x);\n  }\n}\n</code></pre> Podem ser criados mais do que um objeto da mesma classe.</p>"},{"location":"Programming/Java/java_basics/#multiple-classes","title":"Multiple Classes","text":"<p>\u00c9 poss\u00edvel criar uma classe a aceder a esta noutra classe. Isto \u00e9 \u00fatil em termos de organizar as classes.</p> <p>Exemplo: Uma classe tem todos os atributos e m\u00e9todos e outra tem a <code>main()</code>, onde est\u00e1 o c\u00f3digo a ser executado.</p> <p><pre><code>Main.java\npublic class Main {\n  int x = 5;\n}   \n</code></pre> <pre><code>Second.java\nclass Second {\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n}\n</code></pre></p>"},{"location":"Programming/Java/java_basics/#java-attributes","title":"Java Attributes","text":"<p>As \"vari\u00e1veis\" das classes, na verdade, s\u00e3o atributos das classes. </p> <p>Por exemplo, uma classe, <code>Main()</code>, que tem dois atributos, <code>x</code> e <code>y</code>:</p> <pre><code>public class Main {\n  int x = 5;\n  int y = 3;\n}\n</code></pre>"},{"location":"Programming/Java/java_basics/#accessing-attributes","title":"Accessing Attributes","text":"<p>Podemos aceder a atributos das classes, primeiramente criando um objeto da mesma e depois usando o operador <code>.</code>. Por exemplo, aqui estamos a aceder ao atributo <code>x</code> do objeto <code>myObj</code> da classe <code>Main</code>.</p> <pre><code>public class Main {\n  int x = 5;\n\n  public static void main(String[] args) {\n    Main myObj = new Main();\n    System.out.println(myObj.x);\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_index/","title":"Java index","text":"<p> <p> </p> <p></p> <p> <p>Java Basics</p> <p>Java OOP</p> <p></p> <p> <p>Slides da Prof</p> <p></p> <p>teste</p>"},{"location":"Programming/Java/java_oop/","title":"Java oop","text":"<p>Quote</p> <pre><code>OOP stands for Object-Oriented Programming.\n\nProcedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.\n\nObject-oriented programming has several advantages over procedural programming:\n\nOOP is faster and easier to execute\nOOP provides a clear structure for the programs\nOOP helps to keep the Java code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug\nOOP makes it possible to create full reusable applications with less code and shorter development time\n</code></pre> Tip <p>The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.</p>"},{"location":"Programming/Java/java_oop/#static-vs-non-static","title":"Static VS Non-Static","text":"<ul> <li>Static: N\u00e3o precisa de um objeto para chamar o m\u00e9todo.</li> <li>Non-Static: Precisa de ser chamado por um objeto, posteriormente criado.</li> </ul> <pre><code>public class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would compile an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method on the object\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#java-constructors","title":"Java Constructors","text":"<p>Um consctructor \u00e9 usado para inicializar objetos. Ou seja, quando criamos um objeto com: </p> <p><pre><code>Main myObj = new Main();\n</code></pre> Temos tamb\u00e9m que criar o construtor para este, exemplo:</p> <pre><code>  // Create a class constructor for the Main class\n  public Main() {\n    x = 5;  // Set the initial value for the class attribute x\n  }\n</code></pre> <p>Warning</p> <p>Note that the constructor name must match the class name, and it cannot have a return type (like void).</p> <p>Also note that the constructor is called when the object is created.</p> <p>All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes.</p> <p>Example</p> <pre><code>public class Main {\n  int modelYear;\n  String modelName;\n\n  public Main(int year, String name) {\n    modelYear = year;\n    modelName = name;\n  }\n\n  public static void main(String[] args) {\n    Main myCar = new Main(1969, \"Mustang\");\n    System.out.println(myCar.modelYear + \" \" + myCar.modelName);\n  }\n}\n\n// Outputs 1969 Mustang\n</code></pre>"},{"location":"Programming/Java/java_oop/#java-modifiers","title":"Java Modifiers","text":"<ul> <li>Access Modifiers - controls the access level</li> <li>Non-Access Modifiers - do not control access level, but provides other functionality</li> </ul>"},{"location":"Programming/Java/java_oop/#access-modifiers","title":"Access Modifiers","text":"<p>Para classes:</p> Modificador Descri\u00e7\u00e3o <code>public</code> A class \u00e9 alcan\u00e7\u00e1vel por todas as classes default A class s\u00f3 \u00e9 alcan\u00e7\u00e1vel por classes que estejam no mesmo package <p>Para atributos, m\u00e9todos e construtores: </p> Modificador Descri\u00e7\u00e3o <code>public</code> O c\u00f3digo \u00e9 alcan\u00e7avel por todas as classes <code>private</code> O c\u00f3digo s\u00f3 \u00e9 acedido dentro da classe que o declarou default O c\u00f3digo \u00e9 alcan\u00e7avel dentro do mesmo package <code>protected</code> O c\u00f3digo \u00e9 alcan\u00e7\u00e1vel dentro do mesmo package e subclasses <p>"},{"location":"Programming/Java/java_oop/#non-access-modifiers","title":"Non-Access Modifiers","text":"<p>Para classes:</p> Modificador Descri\u00e7\u00e3o <code>final</code> A class n\u00e3o pode ser herdada por outras classes, ou seja, se fizermos <code>extend</code> dessa classe vai dar erro. <code>abstract</code> Uma classe que n\u00e3o pode criar objetos. <p>Para atributos, m\u00e9todos e construtores: </p> Modificador Descri\u00e7\u00e3o <code>final</code> Atributos e m\u00e9todos n\u00e3o podem ser modificados/overriden <code>static</code> Atributos e m\u00e9todos pertencem \u00e0 class e n\u00e3o ao objeto <code>abstract</code> S\u00f3 podem ser usados numa class do tipo <code>abstract</code>. S\u00f3 podem ser usados em m\u00e9todos. O m\u00e9todo n\u00e3o tem \"corpo\", este \u00e9 definido nas subclasses da class <code>abstract</code>. <p>Existem ainda <code>transient</code>, <code>syncronized</code> e <code>volatile</code>, por\u00e9m isto n\u00e3o foi muito falado em aula nem usado em nenhum exerc\u00edcio/lab e usam threads, coisa que n\u00e3o foi falada em POO tb.</p> Os 3 fields mencionados acima Modificador Descri\u00e7\u00e3o <code>transient</code> Attributes and methods are skipped when serializing the object containing them <code>synchronized</code> Methods can only be accessed by one thread at a time <code>volatile</code> The value of an attribute is not cached thread-locally, and is always read from the \"main memory\""},{"location":"Programming/Java/java_oop/#exemplos","title":"Exemplos","text":"Final <pre><code>public class Main {\nfinal int x = 10;\nfinal double PI = 3.14;\n\npublic static void main(String[] args) {\n    Main myObj = new Main();\n    myObj.x = 50; // will generate an error: cannot assign a value to a final variable\n    myObj.PI = 25; // will generate an error: cannot assign a value to a final variable\n    System.out.println(myObj.x);\n}\n}\n</code></pre> Static <pre><code>public class Main {\n// Static method\nstatic void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n}\n\n// Public method\npublic void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n}\n\n// Main method\npublic static void main(String[ ] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would output an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method\n}\n}\n</code></pre> Abstract <pre><code>// Code from filename: Main.java\n// abstract class\nabstract class Main {\npublic String fname = \"John\";\npublic int age = 24;\npublic abstract void study(); // abstract method\n}\n\n// Subclass (inherit from Main)\nclass Student extends Main {\npublic int graduationYear = 2018;\npublic void study() { // the body of the abstract method is provided here\n    System.out.println(\"Studying all day long\");\n}\n}\n// End code from filename: Main.java\n\n// Code from filename: Second.java\nclass Second {\npublic static void main(String[] args) {\n    // create an object of the Student class (which inherits attributes and methods from Main)\n    Student myObj = new Student();\n\n    System.out.println(\"Name: \" + myObj.fname);\n    System.out.println(\"Age: \" + myObj.age);\n    System.out.println(\"Graduation Year: \" + myObj.graduationYear);\n    myObj.study(); // call abstract method\n}\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation serve para esconder \"sensitive\" data ao utilizador. Para isto devemos: </p> <ul> <li> Declarar as vari\u00e1veis/atributos da classe <code>private</code>.</li> <li> Aceder e atualizar valores de vari\u00e1veis <code>private</code> recorrendo aos m\u00e9todos <code>get()</code> e <code>set()</code>.</li> </ul>"},{"location":"Programming/Java/java_oop/#get-and-set","title":"Get and Set","text":"<ul> <li>Getter - retorna o valor de um atributo/vari\u00e1vel sem mudar o valor.</li> <li>Setter - atualiza/muda o valor de um atributo/vari\u00e1vel.</li> </ul> person.javamain.java (erro)main.java (correct) <pre><code>public class Person {\nprivate String name; // private = restricted access\n\n// Getter\npublic String getName() {\n    return name;\n}\n\n// Setter\npublic void setName(String newName) {\n    this.name = newName;\n}\n}\n</code></pre> <pre><code>public class Main {\npublic static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.name = \"John\";  //error (1)\n    System.out.println(myObj.name); // error \n    //as the name variable is declared as private, we cannot access it from outside this class  \n}\n}\n</code></pre> <pre><code>public class Main {\npublic static void main(String[] args) {\n    Person myObj = new Person();\n    myObj.setName(\"John\"); // Set the value of the name variable to \"John\"\n    System.out.println(myObj.getName());\n}\n}\n\n// Outputs \"John\"\n</code></pre> Porqu\u00ea Encapsulation? <ul> <li>Better control of class attributes and methods</li> <li>Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)</li> <li>Flexible: the programmer can change one part of the code without affecting other parts</li> <li>Increased security of data</li> </ul>"},{"location":"Programming/Java/java_oop/#java-packages","title":"Java Packages","text":"<p>Um package em Java \u00e9 utilizado para \"guardar\" classes semelhantes no mesmo s\u00edtio. </p> <p>Existem packeges pr\u00e9-feitos pela Oracle, que podem ser encontrados aqui.</p> <p>Podemos importar classes especificas ou o package inteiro: <pre><code>import package.name.Class;   // Import a single class\nimport package.name.*;   // Import the whole package\nimport java.util.Scanner;\n</code></pre> No exemplo acima <code>java.util</code> \u00e9 o package e <code>Scanner</code> \u00e9 a class.</p>"},{"location":"Programming/Java/java_oop/#creating-a-package","title":"Creating a package","text":"<p><pre><code>\u2514\u2500\u2500 root\n  \u2514\u2500\u2500 mypack\n    \u2514\u2500\u2500 MyPackageClass.java\n</code></pre> MyPackageClass.java<pre><code>package mypack;\nclass MyPackageClass {\n  public static void main(String[] args) {\n    System.out.println(\"This is my package!\");\n  }\n}\n</code></pre></p>"},{"location":"Programming/Java/java_oop/#compiling-with-a-package","title":"Compiling with a package","text":"<ol> <li>Compilar o .java</li> <li>Compilar o package</li> <li>Correr</li> </ol> <p>Ou seja:</p> <ol> <li><code>C:\\Users\\Your Name&gt;javac MyPackageClass.java</code></li> <li><code>C:\\Users\\Your Name&gt;javac -d . MyPackageClass.java</code></li> <li><code>C:\\Users\\Your Name&gt;java mypack.MyPackageClass</code></li> </ol> <p>O output seria: <code>This is my package!</code>.</p>"},{"location":"Programming/Java/java_oop/#java-inheritance","title":"Java Inheritance","text":"<p>Em Java \u00e9 poss\u00edvel que uma classe herde atributos e m\u00e9todos de outra, criando assim uma hierarquia.</p> <p>Podemos separar a hierarquia em dois tipos de classes: * subclass - class que herda os atributos e m\u00e9todos * superclass - class d\u00e1 heran\u00e7a</p> <p>Para uma classe herdar de outra usa-se o <code>extends</code>.</p> Heran\u00e7a <pre><code>class Vehicle {\nprotected String brand = \"Ford\";        // Vehicle attribute\npublic void honk() {                    // Vehicle method\n    System.out.println(\"Tuut, tuut!\");\n}\n}\n\nclass Car extends Vehicle {\nprivate String modelName = \"Mustang\";    // Car attribute\npublic static void main(String[] args) {\n\n    // Create a myCar object\n    Car myCar = new Car();\n\n    // Call the honk() method (from the Vehicle class) on the myCar object\n    myCar.honk();\n\n    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class\n    System.out.println(myCar.brand + \" \" + myCar.modelName);\n}\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#java-polymorphism","title":"Java Polymorphism","text":"<p>O polimorfismo acontece quando temos v\u00e1rias classes relacionadas umas com as outras hierarquicamente. </p> <p>Por exemplo, uma superclass chamada <code>Animal</code> que tem subclasses como <code>Porco</code>, <code>Gato</code>, etc. Todos os animais t\u00eam um <code>animalSound()</code> distinto entre eles.</p> Polimorfismo<pre><code>class Animal {\n  public void animalSound() {\n    System.out.println(\"The animal makes a sound\");\n  }\n}\n\nclass Pig extends Animal {\n  public void animalSound() {\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Dog extends Animal {\n  public void animalSound() {\n    System.out.println(\"The dog says: bow wow\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Animal myAnimal = new Animal();  // Create a Animal object\n    Animal myPig = new Pig();  // Create a Pig object\n    Animal myDog = new Dog();  // Create a Dog object\n    myAnimal.animalSound();\n    myPig.animalSound();\n    myDog.animalSound();\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#java-abstraction","title":"Java Abstraction","text":"<p>Basicamente \u00e9 a cena das classes poderem levar o modificador <code>abstract</code>.</p> <p>Por exemplo, um ve\u00edculo \u00e9 uma \"coisa\" abstrata, mas todos os ve\u00edculos t\u00eam por exemplo uma <code>velocidadeMedia()</code> etc.</p> <pre><code>// Abstract class\nabstract class Animal {\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n    Pig myPig = new Pig(); // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#java-interfaces","title":"Java Interfaces","text":"<p>Usar interfaces \u00e9 outra maneira de criar abstra\u00e7\u00e3o em Java. Uma interface \u00e9 uma classe \"completely abstract\" usada para agrupar m\u00e9todos sem corpo.</p> Interface Interface<pre><code>// interface\ninterface Animal {\npublic void animalSound(); // interface method (does not have a body)\npublic void run(); // interface method (does not have a body)\n}\n</code></pre> <p>Para uma classe aceder aos m\u00e9todos de uma interface usa-se o <code>implements</code>.</p> <code>implements</code> <pre><code>// Interface\ninterface Animal {\npublic void animalSound(); // interface method (does not have a body)\npublic void sleep(); // interface method (does not have a body)\n}\n\n// Pig \"implements\" the Animal interface\nclass Pig implements Animal {\npublic void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n}\npublic void sleep() {\n    // The body of sleep() is provided here\n    System.out.println(\"Zzz\");\n}\n}\n\nclass Main {\npublic static void main(String[] args) {\n    Pig myPig = new Pig();  // Create a Pig object\n    myPig.animalSound();\n    myPig.sleep();\n}\n}\n</code></pre> Note <ul> <li>Interfaces n\u00e3o podem criar objetos, uma vez que s\u00e3o classes <code>abstract</code>.</li> <li>Os m\u00e9todos das interfaces n\u00e3o t\u00eam corpo, este \u00e9 posteriormente definido pelas classes que fazem o <code>implements</code> da interface.</li> <li>Os m\u00e9todos de uma interface s\u00e3o <code>public</code> e <code>abstract</code>.</li> <li>Os atributos de uma interface s\u00e3o <code>public</code>, <code>static</code> e <code>final</code>.</li> <li>Uma interface n\u00e3o tem constructor, uma vez que n\u00e3o cria objetos.</li> </ul> Exemplo com m\u00faltiplas interfaces <pre><code>interface FirstInterface {\npublic void myMethod(); // interface method\n}\n\ninterface SecondInterface {\npublic void myOtherMethod(); // interface method\n}\n\nclass DemoClass implements FirstInterface, SecondInterface {\npublic void myMethod() {\n    System.out.println(\"Some text..\");\n}\npublic void myOtherMethod() {\n    System.out.println(\"Some other text...\");\n}\n}\n\nclass Main {\npublic static void main(String[] args) {\n    DemoClass myObj = new DemoClass();\n    myObj.myMethod();\n    myObj.myOtherMethod();\n}\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#enum","title":"Enum","text":"Enum example<pre><code>public class Main {\n  enum Level {\n    LOW,\n    MEDIUM,\n    HIGH\n  }\n\n  public static void main(String[] args) {\n    Level myVar = Level.MEDIUM; \n    System.out.println(myVar);\n  }\n}\n</code></pre> <p>Warning</p> <p>Os valores de um <code>enum</code> s\u00e3o constantes e imut\u00e1veis, como se fossem definidos com o modificador <code>final</code>.</p> Switch-Case Enum <pre><code>enum Level {\nLOW,\nMEDIUM,\nHIGH\n}\n\npublic class Main {\npublic static void main(String[] args) {\n    Level myVar = Level.MEDIUM;\n\n    switch(myVar) {\n    case LOW:\n        System.out.println(\"Low level\");\n        break;\n    case MEDIUM:\n        System.out.println(\"Medium level\");\n        break;\n    case HIGH:\n        System.out.println(\"High level\");\n        break;\n    }\n}\n}\n</code></pre> For each Enum <pre><code>for (Level myVar : Level.values()) {\n    System.out.println(myVar);\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#user-input","title":"User Input","text":"User Input <pre><code>    import java.util.Scanner;\n\n    class Main {\n    public static void main(String[] args) {\n        Scanner myObj = new Scanner(System.in);\n\n        System.out.println(\"Enter name, age and salary:\");\n\n        // String input\n        String name = myObj.nextLine();\n\n        // Numerical input\n        int age = myObj.nextInt();\n        double salary = myObj.nextDouble();\n\n        // Output input by user\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Salary: \" + salary);\n    }\n    }\n</code></pre>"},{"location":"Programming/Java/java_oop/#arraylist","title":"ArrayList","text":"<p>Uma <code>ArrayList</code> \u00e9 um array mas \"resizable\" que pertence ao package java.util.</p> <p>A diferen\u00e7a entre um array dito normal e um ArrayList \u00e9 q o tamanho de um array normal n\u00e3o pode ser modificado, se queremos meter mais um elemento no array temos de fazer um novo, copiar o array antigo e meter outro elemento na ultima posi\u00e7\u00e3o por exemplo. No caso do ArrayList podemos adicionar ou remover elementos sem problema.</p> <p>A syntax \u00e9 diferente que num array normal!</p> Uma `ArrayList` que vai guardar strings<pre><code>import java.util.ArrayList; // import the ArrayList class\n\nArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;(); // Create an ArrayList object\n</code></pre>"},{"location":"Programming/Java/java_oop/#adicionar-elementos","title":"Adicionar elementos","text":"add( ) <pre><code>import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#aceder-a-um-elemento-por-index","title":"Aceder a um elemento por index","text":"get( ) <p><code>cars.get(0);</code></p>"},{"location":"Programming/Java/java_oop/#modificar-elementos-numa-arraylist","title":"Modificar elementos numa ArrayList","text":"set( ) <p><code>cars.set(0, \"Opel\");</code></p>"},{"location":"Programming/Java/java_oop/#remover-um-elemento-da-arraylist","title":"Remover um elemento da ArrayList","text":"remove( ) <p><code>cars.remove(0);</code></p>"},{"location":"Programming/Java/java_oop/#remover-todos-os-elementos-da-arraylist","title":"Remover todos os elementos da ArrayList","text":"clear( ) <p><code>cars.clear();</code> </p>"},{"location":"Programming/Java/java_oop/#tamanho-de-uma-arraylist","title":"Tamanho de uma ArrayList","text":"<p><code>cars.size()</code></p>"},{"location":"Programming/Java/java_oop/#loop-de-uma-arraylist","title":"Loop de uma ArrayList","text":"For<pre><code>public class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (int i = 0; i &lt; cars.size(); i++) {\n      System.out.println(cars.get(i));\n    }\n  }\n}\n</code></pre> <p>Tamb\u00e9m se pode usar o For-Each</p> For-Each<pre><code>public class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#sort-arraylist","title":"Sort ArrayList","text":"<p>Existe uma class no package java.util chamada <code>Collections</code> que inclui a funcionalidade <code>sort()</code> e que pode ser usada numa ArrayList, ordenando-a alfabeticamente ou numericamente.</p> Sort( ) Sort alfabeticamente<pre><code>import java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    Collections.sort(cars);  // Sort cars\n    for (String i : cars) {\n      System.out.println(i);\n    }\n  }\n}\n</code></pre> Sort Numericamente<pre><code>import java.util.ArrayList;\nimport java.util.Collections;  // Import the Collections class\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;Integer&gt; myNumbers = new ArrayList&lt;Integer&gt;();\n    myNumbers.add(33);\n    myNumbers.add(15);\n    myNumbers.add(20);\n    myNumbers.add(34);\n    myNumbers.add(8);\n    myNumbers.add(12);\n\n    Collections.sort(myNumbers);  // Sort myNumbers\n\n    for (int i : myNumbers) {\n      System.out.println(i);\n    }\n  }\n}\n</code></pre>"},{"location":"Programming/Java/java_oop/#linkedlist","title":"LinkedList","text":"<p>Uma <code>LinkedList</code> \u00e9 muito parecida a uma <code>ArrayList</code> (at\u00e9 porque usam a mesma interface <code>List</code>) porem s\u00e3o construidas de formas muito diferentes.</p> <p>Uma <code>ArrayList</code> tem um array normal dentro dela.</p> <p>Uma <code>LinkedList</code> guarda os seus item dentro de \"containers\". A List tem um link para o primeiro container, e cada container tem um link para o pr\u00f3ximo. Tipo nodes em AED. </p> <p>Normalmente a <code>ArrayList</code> \u00e9 mais eficiente uma vez que o seu uso foca-se mais em aceder a index's random da lista, mas a <code>LinkedList</code> tem m\u00e9todos mais eficientes para alguns casos:</p> M\u00e9todo Descri\u00e7\u00e3o addFirst() Adiciona um item ao inicio da lista addLast() Adiciona um item ao fim da lista removeFirst() Remove um item do inicio da lista removeLast() Remove um item do fim da lista getFirst() Obt\u00e9m o primeiro item da lista getLast() Obt\u00e9m o ultimo item da lista <p>!!!* tip \"Quando usar?\"     Usa-se a <code>ArrayList</code> para guardar e aceder a dados, e a <code>LinkedList</code> para manipular dados.</p> Example <pre><code>import java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList&lt;String&gt; cars = new LinkedList&lt;String&gt;();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    \n    // Use getLast() to display the last item in the list\n    System.out.println(cars.getFirst()); //Output: Volvo\n    cars.addFirst(\"Hola\");\n    System.out.println(cars.getFirst()); //Output: Hola\n  }\n}\n</code></pre>"},{"location":"Programming/Linux/Commands/","title":"Commands","text":""},{"location":"Programming/Linux/Commands/#useful-commands","title":"Useful Commands:","text":"<code>neofetch</code> <p><code>neofetch</code> - display system info through a short terminal command</p> <p> </p> <p>So, by default Neofetch will show you the following list of items:</p> <ul> <li>Name of the operating system</li> <li>Name and model of the laptop</li> <li>Kernel version</li> <li>Uptime (how long the system has been running)</li> <li>Total number of packages (installed by default and other)</li> <li>Shell and its version</li> <li>Screen resolution</li> <li>DE (desktop environment)</li> <li>WM (window manager)</li> <li>Theme of the window manager</li> <li>Current system theme</li> <li>System icons</li> <li>Terminal</li> <li>CPU details</li> <li>GPU details</li> <li>System memory (RAM)</li> </ul>"},{"location":"Programming/Linux/Exploits/","title":"Exploits","text":""},{"location":"Programming/Linux/Exploits/#kernel-version-exploit","title":"Kernel Version Exploit","text":"<p>O comando <code>uname</code> retorna informa\u00e7\u00f5es do sistema: </p> <p> </p> <p>Caso tenhamos acesso ao computador da v\u00edtima podemos saber qual \u00e9 a vers\u00e3o do seu kernel usando <code>uname -r</code> e com uma pesquisa no google do tipo \" exploit\" conseguimos facilmente se existe alguma fragilidade nessa vers\u00e3o que nos possa, por exemplo, fornecer acesso root."},{"location":"Programming/Linux/Introdu%C3%A7%C3%A3o/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"Programming/Linux/Introdu%C3%A7%C3%A3o/#introdu\u00e7\u00e3o","title":"Introdu\u00e7\u00e3o","text":"<p>Nesta p\u00e1gina bla bla bla linux intro fancy </p>"},{"location":"Programming/Linux/Introdu%C3%A7%C3%A3o/#hist\u00f3ria-e-curiosidades-do-linux","title":"Hist\u00f3ria e curiosidades do Linux:","text":"<p>No in\u00edcio, o Linux era um projeto pessoal iniciado em 1991 por um estudante finland\u00eas chamado Linus Torvalds. O seu objetivo era criar um kernel novo para um sistema operacional open-source. Ao longo dos anos, o kernel Linux passou de um pequeno n\u00famero de arquivos escritos em C para a vers\u00e3o mais recente com mais de 23 milh\u00f5es de linhas de c\u00f3digo fonte (exclu\u00eddos os coment\u00e1rios). </p> <p>O Linux est\u00e1 dispon\u00edvel em mais de 600 distribui\u00e7\u00f5es (ou \"distros\"). Alguns dos mais populares e conhecidos s\u00e3o Ubuntu, Debian, Fedora, OpenSUSE, Elementary, Manjaro, Gentoo Linux, RedHat e Linux Mint.</p> <p>O Linux \u00e9 considerado mais seguro comparativamente a outros sistemas operativos uma vez que \u00e9 menos suscet\u00edvel a malware que o Windows e recebe updates frequentemente. Em contrapartida o Linux n\u00e3o tem tantos hardware drivers como o Windows. </p>"},{"location":"Programming/Linux/Introdu%C3%A7%C3%A3o/#filosofia","title":"Filosofia","text":"<p>O Linux tem 5 princ\u00edpios core:</p> Principio Descris\u00e3o Tudo \u00e9 um ficheiro Todos os arquivos de configura\u00e7\u00e3o dos v\u00e1rios servi\u00e7os executados no sistema operacional Linux s\u00e3o armazenados em um ou mais arquivos de texto. Programas pequenos e de prop\u00f3sito \u00fanico O Linux oferece muitas ferramentas diferentes, que podem ser combinadas para trabalhar em conjunto. Capacidade de encadear programas para executar tarefas complexas A integra\u00e7\u00e3o e combina\u00e7\u00e3o de diferentes ferramentas permite-nos realizar muitas tarefas grandes e complexas, como processar ou filtrar resultados de dados espec\u00edficos Evita user interfaces O Linux est\u00e1 desenhado para trabalhar principalmente atrav\u00e9s do terminal Configura\u00e7\u00f5es s\u00e3o guardadas em ficheiros de texto Um exemplo deste tipo de arquivo \u00e9 o /etc/passwd, que armazena configura\u00e7\u00f5es de users do sistema."},{"location":"Programming/Linux/Introdu%C3%A7%C3%A3o/#arquitetura-linux","title":"Arquitetura Linux","text":"<p>O SO Linux pode ser repartido nas seguintes camadas: </p> <p> </p>"},{"location":"Programming/Linux/Introdu%C3%A7%C3%A3o/#filesystem-hierarchy-standard-fhs","title":"Filesystem Hierarchy Standard  (FHS)","text":"<p>A estrutura Linux assemelha-se a uma \"\u00e1rvore hier\u00e1rquica\": </p> <p> </p> <p> </p>"},{"location":"Programming/Linux/SSH/","title":"SSH","text":""},{"location":"Programming/Linux/SSH/#ssh-secure-shell","title":"SSH (Secure Shell)","text":"<p>SSH \u00e9 um protocolo que permite aceder e executar comandos remotamente. Em sistemas baseados em UNIX, como Linux, a funcionalidade SSH vem previamente instalada.</p>"},{"location":"Programming/Linux/Terminal/","title":"Terminal","text":""},{"location":"Programming/Linux/Terminal/#formato-do-terminal","title":"Formato do terminal","text":"<p><code>&lt;username&gt;@&lt;hostname&gt;&lt;current working directory&gt;$</code> </p>"},{"location":"Programming/Linux/Terminal/#home-dir--root-dir","title":"Home dir &amp; Root dir","text":"<p>Se estivermos na dir <code>/home</code> a <code>&lt;current working directory&gt;</code> vai ter um <code>~</code> \u00e0 frente. Quando abrimos o terminal ele por defini\u00e7\u00e3o vai ser inicializado nesta diretoria. Caso mudemos de terminal para a <code>/root</code> por exemplo, esta vai ter um <code>/</code> apenas. </p> <p>Por exemplo: </p> <p> </p>"},{"location":"Programming/Linux/Terminal/#root-user","title":"Root user","text":"<p>Para fazer alguma coisa com permiss\u00f5es <code>root</code>, o comando \u00e9 <code>sudo</code>, e a sess\u00e3o BASH (Borne Again Shell) vai ter um <code>#</code> \u00e0 frente do user inv\u00e9s de um <code>$</code>: </p> <p> </p>"},{"location":"Programming/Linux/Terminal/#documenta\u00e7\u00e3o-de-um-comando","title":"Documenta\u00e7\u00e3o de um comando","text":"<p>Para aceder \u00e0 documenta\u00e7\u00e3o de um comando existem v\u00e1rias op\u00e7\u00f5es, tais como: </p> <ul> <li><code>man &lt;command&gt;</code></li> <li><code>&lt;command&gt; -h</code> ou <code>&lt;command&gt; --help</code></li> <li><code>apropos &lt;command&gt;</code> </li> </ul> <p>Uma ferramenta muito \u00fatil para perceber o que \u00e9 que cada argumento de um comando faz \u00e9 a Explain Shell: </p> <p> </p>"},{"location":"Programming/Linux/cheatsheet/","title":"Cheatsheet","text":"Command Description <code>man &lt;tool&gt;</code> Opens man pages for the specified tool. <code>&lt;tool&gt; -h</code> Prints the help page of the tool. <code>apropos &lt;keyword&gt;</code> Searches through man pages' descriptions for instances of a given keyword. <code>cat</code> Concatenate and print files. <code>whoami</code> Displays current username. <code>id</code> Returns users identity. <code>hostname</code> Sets or prints the name of the current host system. <code>uname</code> Prints operating system name. <code>pwd</code> Returns working directory name. <code>ifconfig</code> The <code>ifconfig</code> utility is used to assign or view an address to a network interface and/or configure network interface parameters. <code>ip</code> Ip is a utility to show or manipulate routing, network devices, interfaces, and tunnels. <code>netstat</code> Shows network status. <code>ss</code> Another utility to investigate sockets. <code>ps</code> Shows process status. <code>who</code> Displays who is logged in. <code>env</code> Prints environment or sets and executes a command. <code>lsblk</code> Lists block devices. <code>lsusb</code> Lists USB devices. <code>lsof</code> Lists opened files. <code>lspci</code> Lists PCI devices. <code>sudo</code> Execute command as a different user. <code>su</code> The <code>su</code> utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser).  A shell is then executed. <code>useradd</code> Creates a new user or update default new user information. <code>userdel</code> Deletes a user account and related files. <code>usermod</code> Modifies a user account. <code>addgroup</code> Adds a group to the system. <code>delgroup</code> Removes a group from the system. <code>passwd</code> Changes user password. <code>dpkg</code> Install, remove and configure Debian-based packages. <code>apt</code> High-level package management command-line utility. <code>aptitude</code> Alternative to <code>apt</code>. <code>snap</code> Install, remove and configure snap packages. <code>gem</code> Standard package manager for Ruby. <code>pip</code> Standard package manager for Python. <code>git</code> Revision control system command-line utility. <code>systemctl</code> Command-line based service and systemd control manager. <code>ps</code> Prints a snapshot of the current processes. <code>journalctl</code> Query the systemd journal. <code>kill</code> Sends a signal to a process. <code>bg</code> Puts a process into background. <code>jobs</code> Lists all processes that are running in the background. <code>fg</code> Puts a process into the foreground. <code>curl</code> Command-line utility to transfer data from or to a server. <code>wget</code> An alternative to <code>curl</code> that downloads files from FTP or HTTP(s) server. <code>python3 -m http.server</code> Starts a Python3 web server on TCP port 8000. <code>ls</code> Lists directory contents. <code>cd</code> Changes the directory. <code>clear</code> Clears the terminal. <code>touch</code> Creates an empty file. <code>mkdir</code> Creates a directory. <code>tree</code> Lists the contents of a directory recursively. <code>mv</code> Move or rename files or directories. <code>cp</code> Copy files or directories. <code>nano</code> Terminal based text editor. <code>which</code> Returns the path to a file or link. <code>find</code> Searches for files in a directory hierarchy. <code>updatedb</code> Updates the locale database for existing contents on the system. <code>locate</code> Uses the locale database to find contents on the system. <code>more</code> Pager that is used to read STDOUT or files. <code>less</code> An alternative to <code>more</code> with more features. <code>head</code> Prints the first ten lines of STDOUT or a file. <code>tail</code> Prints the last ten lines of STDOUT or a file. <code>sort</code> Sorts the contents of STDOUT or a file. <code>grep</code> Searches for specific results that contain given patterns. <code>cut</code> Removes sections from each line of files. <code>tr</code> Replaces certain characters. <code>column</code> Command-line based utility that formats its input into multiple columns. <code>awk</code> Pattern scanning and processing language. <code>sed</code> A stream editor for filtering and transforming text. <code>wc</code> Prints newline, word, and byte counts for a given input. <code>chmod</code> Changes permission of a file or directory. <code>chown</code> Changes the owner and group of a file or directory."},{"location":"blog/","title":"Blog","text":""},{"location":"blog/#welcome-to-my-blog","title":"Welcome to my blog","text":"<p>This is my blog. I will write about my experiences and my thoughts.</p>"},{"location":"blog/posts/Markdown_Tests_2/","title":"Markdown Tests","text":""},{"location":"blog/posts/Markdown_Tests_2/#icon-search","title":"Icon Search","text":"<p> Tip: Enter some keywords to find icons and emojis and click on the   shortcode to copy it to your clipboard. </p>"},{"location":"blog/posts/Markdown_Tests_2/#annotations","title":"Annotations","text":"ResultCode <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, \u2026 basically anything that can be expressed in Markdown.</li> </ol> <pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre>"},{"location":"blog/posts/Markdown_Tests_2/#math","title":"Math","text":"ResultCode <pre>\\[\n\\int_0^\\infty \\frac{x^3}{e^x} \\, dx = \\frac{\\pi^4}{15}\n\\]</pre> <pre><code>$$\n\\int_0^\\infty \\frac{x^3}{e^x} \\, dx = \\frac{\\pi^4}{15}\n$$\n</code></pre>"},{"location":"blog/posts/Markdown_Tests_2/#code","title":"Code","text":"ResultCode <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>  ``` c++\n  #include &lt;iostream&gt;\n\n  int main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n  }\n  ```\n</code></pre>"},{"location":"blog/posts/Markdown_Tests_2/#mermaid","title":"Mermaid","text":"ResultCode <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>  ``` mermaid\n  graph LR\n    A[Start] --&gt; B{Error?};\n    B --&gt;|Yes| C[Hmm...];\n    C --&gt; D[Debug];\n    D --&gt; B;\n    B ----&gt;|No| E[Yay!];\n  ```\n</code></pre>"},{"location":"blog/posts/Markdown_Tests_2/#tabs","title":"Tabs","text":"Result <p>=== \"Bash\"</p> <pre><code>  ```bash\n  #!/bin/bash\n\n  echo \"Hello world!\"\n  ```\n</code></pre> <p>=== \"Explanation\"</p> <pre><code>  This is only a short example of how to make tabs.\n</code></pre> Code <pre><code>  === \"Bash\"\n\n      ```bash\n      #!/bin/bash\n\n      echo \"Hello world!\"\n      ```\n\n  === \"Explanation\"\n\n      This is only a short example of how to make tabs.\n</code></pre>"},{"location":"blog/posts/Markdown_Tests_2/#lists","title":"Lists","text":"ResultCode <ul> <li> text</li> <li> text</li> <li> <p> text</p> </li> <li> <p>First item</p> </li> <li>Second item</li> <li> <p>Third item</p> </li> <li> <p>Unordered item 1</p> </li> <li>Unordered item 2</li> <li>Unordered item 3</li> </ul> <pre><code>  - [x] text\n  - [x] text\n  - [ ] text\n\n  1. First item\n  2. Second item\n  3. Third item\n\n  * Unordered item 1\n  * Unordered item 2\n  * Unordered item 3\n</code></pre>"},{"location":"blog/posts/Markdown_Tests_2/#code_1","title":"Code","text":"Result <p>```python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)):     for j in range(len(items) - 1 - i):         if items[j] &gt; items[j + 1]:             items[j], items[j + 1] = items[j + 1], items[j]</p> <p>```</p> Code <pre><code>  ```python title=\"Bubble sort\" hl_lines=\"3 4\"\n  \"\"\" Bubble sort \"\"\"\n  def bubble_sort(items):\n  for i in range(len(items)):\n      for j in range(len(items) - 1 - i):\n          if items[j] &gt; items[j + 1]:\n              items[j], items[j + 1] = items[j + 1], items[j]\n  ```\n</code></pre> <p> <p>0%</p> <p>5%</p> <p>25%</p> <p>45%</p> <p>65%</p> <p>85%</p> <p>100% ready</p> </p> <p> <p></p> </p> <p>blockdiag {     A -&gt; B -&gt; C -&gt; D;     A -&gt; E -&gt; F -&gt; G; }</p> <p>blockdiag {    A [label = \"foo\"];    B [label = \"bar\"];    C [label = \"baz\"];</p> <p>A -&gt; B [label = \"click bar\", textcolor=\"red\"];    B -&gt; C [label = \"click baz\"];    C -&gt; A; }</p> <p>blockdiag {    // Set labels to nodes.    A [label = \"foo\"];    B [label = \"bar\"];    // And set text-color    C [label = \"baz\"];</p> <p>// Set labels to edges. (short text only)    A -&gt; B [label = \"click bar\", textcolor=\"red\"];    B -&gt; C [label = \"click baz\"];    C -&gt; A; }</p> <pre><code>blockdiag {\n   // Set boder-style, backgroun-color and text-color to nodes.\n   A [style = dotted];\n   B [style = dashed];\n   C [color = pink, style = \"3,3,3,3,15,3\"]; //dashed_array format style\n   D [color = \"#888888\", textcolor=\"#FFFFFF\"];\n   // Set border-style and color to edges.\n   A -&gt; B [style = dotted];\n   B -&gt; C [style = dashed];\n   C -&gt; D [color = \"red\", style = \"3,3,3,3,15,3\"]; //dashed_array format style\n   // Set numbered-badge to nodes.\n   E [numbered = 99];\n   // Set arrow direction to edges.\n   E -&gt; F [dir = none];\n   F -&gt; G [dir = forward];\n   G -&gt; H [dir = back];\n   H -&gt; I [dir = both];\n   // Set width and height to nodes.\n   K [width = 192]; // default value is 128\n   L [height = 64]; // default value is 40\n   // Use thick line\n   J -&gt; K [thick]\n   K -&gt; L;\n}\n</code></pre> <p>blockdiag {   // branching edges to multiple children   A -&gt; B, C;   // branching edges from multiple parents   D, E -&gt; F; }</p> <p>Ctrl\uff0bAlt\uff0bDel</p>"}]}