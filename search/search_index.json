{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"P\u00e1gina Inicial"},{"location":"le_stuff/","text":"Index \u00b6 Bonus GitPages Search Engine \u00b6 \u00c9 poss\u00edvel procurar cenas no GitPages clicando F . Isto \u00e9 um teste ola 2","title":"Le stuff"},{"location":"le_stuff/#index","text":"Bonus","title":"Index"},{"location":"le_stuff/#gitpages-search-engine","text":"\u00c9 poss\u00edvel procurar cenas no GitPages clicando F . Isto \u00e9 um teste ola 2","title":"GitPages Search Engine"},{"location":"IST/","text":"","title":"Index"},{"location":"IST/3%C2%BA%20Ano%20/controlo/","text":"1\u00aaS\u00e9rie de Problemas Resolvidos","title":"Index"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/","text":"2) \u00b6 Equa\u00e7\u00e3o diferencial Equa\u00e7\u00e3o diferencial \u00e9 uma equa\u00e7\u00e3o cuja inc\u00f3gnita \u00e9 uma fun\u00e7\u00e3o que aparece na equa\u00e7\u00e3o sob a forma das respectivas derivadas. Resolu\u00e7\u00e3o a) \u00b6 O que \u00e9 pedido \u00e9 uma equa\u00e7\u00e3o diferencial que relacione a tens\u00e3o de entrada com a tens\u00e3o de sa\u00edda. Usaremos para isso: Equa\u00e7\u00e3o das Malhas Equa\u00e7\u00e3o do Condensador \\[ v_i(t)= Ri(t)+v_o(t) \\] \\[ i(t)=C*\\frac{dv_o(t)}{dt} \\] Substituindo a equa\u00e7\u00e3o de \\(i(t)\\) na de \\(v_i(t)\\) ficamos com: \\[ v_i(t)=RC*\\frac{dv_o(t)}{dt}+v_o(t) \\] A equa\u00e7\u00e3o de cima por si s\u00f3 j\u00e1 \u00e9 uma equa\u00e7\u00e3o diferencial. Podemos obter a equa\u00e7\u00e3o \"cl\u00e1ssica\" para um circuito RC dividindo tudo por \\(RC\\) . \\[ \\frac{1}{RC}v_i(t)=\\frac{dv_o(t)}{dt}+\\frac{1}{RC}v_o(t) \\] b) \u00b6 Aqui pretende-se obter a transformada de laplace \\(H(s)=\\frac{V_o(s)}{V_i(s)}\\) . Para isto basta pegar na equa\u00e7\u00e3o resolvida em a) uma vez que relaciona as duas. \\(TL^{-1}\\) : \\[ \\frac{1}{RC}V_i(s)=sV_o(t)+\\frac{1}{RC}V_o(s) \\] \\[ \\equiv \\] \\[ H(S)=\\frac{V_o(s)}{V_i(s)}=\\frac{\\frac{1}{RC}}{s+\\frac{1}{RC}} \\] c) \u00b6 Determinar a resposta no tempo de \\(v_o(t)\\) um escal\u00e3o unit\u00e1rio basicamente ver qual \u00e9 a resposta de \\(V_o(s)\\) a um \\(V_i(s)=\\frac{1}{s}\\) . Ficaria portanto: \\[ V_o(s)=\\frac{\\frac{1}{RC}}{s+\\frac{1}{RC}}V_i(s)\\ \\ \\ \\And \\ \\ \\ V_i(s)=\\frac{1}{s} \\] \\[ V_o(s)=\\frac{\\frac{1}{RC}}{s(s+\\frac{1}{RC})} \\] Agora temos de decompor esta fun\u00e7\u00e3o em fra\u00e7\u00f5es simples: Resolu\u00e7\u00e3o em fra\u00e7\u00f5es simples Ficando portanto: \\[ V_o(s)=\\frac{1}{s}-\\frac{1}{s-\\frac{1}{RC}} \\] Fazendo a transformada inversa de Laplace \\(TL^{-1}\\) de \\(V_o(t)\\) : \\[ v_o(t)=u(t)+e^{-\\frac{1}{RC}}u(t) % (1) \\] Note d) \u00b6 O que \u00e9 q acontece \u00e0 resposta temporal de \\(v_o(t)\\) caso \\(RC\\) aumente ou diminua? Se olharmos para \\(H(s)\\) e o projetarmos num eixo imagin\u00e1rio $$ H(jw) = \\frac{\\frac{1}{RC}}{j\\omega+\\frac{1}{RC}} $$ Quando o polo se distancia da origem a frequ\u00eancia de corte aumenta!!! Se a \\(f_c\\) aumenta, o sistema responde mais r\u00e1pido: Como seria de esperar, se RC aumentar, verifica-se o efeito inverso. 4) \u00b6 a) \u00b6 Resolu\u00e7\u00e3o b) \u00b6 Resolu\u00e7\u00e3o Problema 5 \u00b6","title":"1a serie prob"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#2","text":"Equa\u00e7\u00e3o diferencial Equa\u00e7\u00e3o diferencial \u00e9 uma equa\u00e7\u00e3o cuja inc\u00f3gnita \u00e9 uma fun\u00e7\u00e3o que aparece na equa\u00e7\u00e3o sob a forma das respectivas derivadas. Resolu\u00e7\u00e3o","title":"2)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#a","text":"O que \u00e9 pedido \u00e9 uma equa\u00e7\u00e3o diferencial que relacione a tens\u00e3o de entrada com a tens\u00e3o de sa\u00edda. Usaremos para isso: Equa\u00e7\u00e3o das Malhas Equa\u00e7\u00e3o do Condensador \\[ v_i(t)= Ri(t)+v_o(t) \\] \\[ i(t)=C*\\frac{dv_o(t)}{dt} \\] Substituindo a equa\u00e7\u00e3o de \\(i(t)\\) na de \\(v_i(t)\\) ficamos com: \\[ v_i(t)=RC*\\frac{dv_o(t)}{dt}+v_o(t) \\] A equa\u00e7\u00e3o de cima por si s\u00f3 j\u00e1 \u00e9 uma equa\u00e7\u00e3o diferencial. Podemos obter a equa\u00e7\u00e3o \"cl\u00e1ssica\" para um circuito RC dividindo tudo por \\(RC\\) . \\[ \\frac{1}{RC}v_i(t)=\\frac{dv_o(t)}{dt}+\\frac{1}{RC}v_o(t) \\]","title":"a)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#b","text":"Aqui pretende-se obter a transformada de laplace \\(H(s)=\\frac{V_o(s)}{V_i(s)}\\) . Para isto basta pegar na equa\u00e7\u00e3o resolvida em a) uma vez que relaciona as duas. \\(TL^{-1}\\) : \\[ \\frac{1}{RC}V_i(s)=sV_o(t)+\\frac{1}{RC}V_o(s) \\] \\[ \\equiv \\] \\[ H(S)=\\frac{V_o(s)}{V_i(s)}=\\frac{\\frac{1}{RC}}{s+\\frac{1}{RC}} \\]","title":"b)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#c","text":"Determinar a resposta no tempo de \\(v_o(t)\\) um escal\u00e3o unit\u00e1rio basicamente ver qual \u00e9 a resposta de \\(V_o(s)\\) a um \\(V_i(s)=\\frac{1}{s}\\) . Ficaria portanto: \\[ V_o(s)=\\frac{\\frac{1}{RC}}{s+\\frac{1}{RC}}V_i(s)\\ \\ \\ \\And \\ \\ \\ V_i(s)=\\frac{1}{s} \\] \\[ V_o(s)=\\frac{\\frac{1}{RC}}{s(s+\\frac{1}{RC})} \\] Agora temos de decompor esta fun\u00e7\u00e3o em fra\u00e7\u00f5es simples: Resolu\u00e7\u00e3o em fra\u00e7\u00f5es simples Ficando portanto: \\[ V_o(s)=\\frac{1}{s}-\\frac{1}{s-\\frac{1}{RC}} \\] Fazendo a transformada inversa de Laplace \\(TL^{-1}\\) de \\(V_o(t)\\) : \\[ v_o(t)=u(t)+e^{-\\frac{1}{RC}}u(t) % (1) \\] Note","title":"c)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#d","text":"O que \u00e9 q acontece \u00e0 resposta temporal de \\(v_o(t)\\) caso \\(RC\\) aumente ou diminua? Se olharmos para \\(H(s)\\) e o projetarmos num eixo imagin\u00e1rio $$ H(jw) = \\frac{\\frac{1}{RC}}{j\\omega+\\frac{1}{RC}} $$ Quando o polo se distancia da origem a frequ\u00eancia de corte aumenta!!! Se a \\(f_c\\) aumenta, o sistema responde mais r\u00e1pido: Como seria de esperar, se RC aumentar, verifica-se o efeito inverso.","title":"d)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#4","text":"","title":"4)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#a_1","text":"Resolu\u00e7\u00e3o","title":"a)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#b_1","text":"Resolu\u00e7\u00e3o","title":"b)"},{"location":"IST/3%C2%BA%20Ano%20/controlo/1a_serie_prob/#problema-5","text":"","title":"Problema 5"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/","text":"Intro \u00b6 Esta sec\u00e7\u00e3o vai ser uma an\u00e1lise ao template arranjado no GitHub. Os ficheiros est\u00e3o no nosso reposit\u00f3rio, aqui . Como \u00e9 q isto ta interligado? \u00b6 Sobre como \u00e9 q foi feito o UML Se quiseres saber como \u00e9 q fiz este UML t\u00e1 aqui, mas basicamente d\u00e1 para fazer rever engineering com o Visual Paradigm diretamente do c\u00f3digo. Tools>Code>Reverse Java Code Selecionas os .java Fazes um novo diagram e arrastas para l\u00e1 as classes. Elas j\u00e1 v\u00e3o estar interligadas. Might be useful para depois vermos se o nosso UML final est\u00e1 bem ou n\u00e3o. VideoPoker.class - \u00e9 tipo a main.class nos labs de java Ela s\u00f3 inicializa o jogo basically, que na pratica \u00e9 criar um novo objeto da Game.class : C\u00f3digo da VideoPoker.class java public class VideoPoker { public static void main(String[] args) { Game g = new Game(); g.play(); } } // end class VideoPoker \u00c9 chamado o m\u00e9todo play() da classe Game . Este m\u00e9todo \u00e9 um loop infinito onde se joga o jogo. Note O construtor do game cria um objeto da classe Deck e da classe Player . TODO A bet do jogador est\u00e1 hardcoded a 1, tem de ser mudado depois: java // This is game bet that is debited from player's outstanding credit private final int GAME_BET = 1; D\u00e1 print a isto e aguarda instru\u00e7\u00f5es do user: Como \u00e9 q isto funciona? Existe um loop a ver se a resposta \u00e9 de 0-9, se n\u00e3o for ent\u00e3o diz q t\u00e1 inv\u00e1lido e depois pede novamente. Se for 0 ent\u00e3o sai do prog Se for 1-9 ent\u00e3o \u00e9 analisado noutra parte do c\u00f3digo. (break do loop) Loop do user input java title=\"VideoPoker.class\" // This loop will check if the player wants to continue the Game or Exit Scanner scan = new Scanner(System.in); while(true) { String tempValue = scan.nextLine(); if(tempValue.equals(\"9\")) { break; } else if(tempValue.equals(\"0\")) { return; } else { System.out.print(\"Invalid entry. Please try again (Enter value: 0 or 9) - \"); } } Depois \u00e9 feito um Shuffle do baralho. \u00c9 um m\u00e9todo da classe Deck , apropriadamente chamada xD. Deck.class \u00b6 Criar o baralho \u00b6 1\u00ba - \u00e9 criado (no construtor Deck ) o baralho, basicamente 52 objetos da class Card . Ou melhor, um array de objetos com 52 posi\u00e7\u00f5es. V\u00ea o c\u00f3digo abaixo q percebes. Ele chama este array theDeck . Organiza\u00e7\u00e3o do baralho O gajo q fez isto basicamente usou s\u00f3 inteiros, o q at\u00e9 inteligente porque assim faz combina\u00e7\u00f5es mais facilmente \u00e9 usa menos mem\u00f3ria a comparar cartas por exemplo, acho eu. Tem 2 argumentos/parametros para criar o objeto Card , que \u00e9 o suit e o value . Suit vai de 1-4 (4 nipes) e o value 1-13 (cartas 2-10 + J Q K A) C\u00f3digo para criar o baralho ```java public Deck () { // sendo total_cards = 52 theDeck = new Card [TOTAL_CARDS]; top = 0; Text Only 1 2 3 4 5 6 7 8 9 10 11 12 int suit = 1; int value = 1; for (int i = 0; i < theDeck.length; i++) { theDeck[i] = new Card (suit, value); value++; if (value > 13) { // new suit suit++; value = 1; } } } ``` Criar o deck como queremos Como n\u00f3s queremos ter xH xS xC xD podemos fazer o q escrevi nestes coment\u00e1rios, e posteriormente faziamos a concatena\u00e7\u00e3o do x com o H , v\u00ea se percebes pelos coment\u00e1rios. ```java int suit = 'H'; //neste caso seria string ou char int value = '2'; for (int i = 0; i < theDeck.length; i++) { theDeck[i] = new Card (suit, value); //a primeira itera\u00e7\u00e3o vai criar uma carta 2H Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 /*Podemos ter um loop dentro de outro loop:*/ /*LOOP DE FORA */ // mudar o nipe! /*LOOP DE DENTRO */ /*temos agora de fazer a itera\u00e7\u00e3o do value de 2-10 verificar se o value j\u00e1 \u00e9 = a 10 e depois passar para J, depois passar para Q depois passar para K depois passar para A muda de nipe no loop de fora*/ } } ``` Shuffle do baralho \u00b6 O gajo faz 1000 trocas entre 2 cartas com index random do baralho, not sure se \u00e9 a maneira mais eficiente de fazer isto, mas tu \u00e9s o rei do pensamento l\u00f3gico deves saber se h\u00e1 maneira melhor ou n\u00e3o. public void shuffle () { int firstCard = 0; int secondCard = 0; for (int i = 0; i <= 1000; i++) // swaps two Card elements in the Deck { firstCard = (int) (Math.random () * TOTAL_CARDS); secondCard = (int) (Math.random () * TOTAL_CARDS); Card temp = theDeck[firstCard]; theDeck[firstCard] = theDeck[secondCard]; theDeck[secondCard] = temp; } } Atribuir m\u00e3o \u00b6 Ok, o proximo passo q o gajo faz depois de baralhar o deck \u00e9 dar uma m\u00e3o ao jogador. 1\u00ba ele cria uma arrayList de Card vazia. (no constructor) e atribui os cr\u00e9ditos iniciais ao player, 50.","title":"Analise vp"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/#intro","text":"Esta sec\u00e7\u00e3o vai ser uma an\u00e1lise ao template arranjado no GitHub. Os ficheiros est\u00e3o no nosso reposit\u00f3rio, aqui .","title":"Intro"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/#como-e-q-isto-ta-interligado","text":"Sobre como \u00e9 q foi feito o UML Se quiseres saber como \u00e9 q fiz este UML t\u00e1 aqui, mas basicamente d\u00e1 para fazer rever engineering com o Visual Paradigm diretamente do c\u00f3digo. Tools>Code>Reverse Java Code Selecionas os .java Fazes um novo diagram e arrastas para l\u00e1 as classes. Elas j\u00e1 v\u00e3o estar interligadas. Might be useful para depois vermos se o nosso UML final est\u00e1 bem ou n\u00e3o. VideoPoker.class - \u00e9 tipo a main.class nos labs de java Ela s\u00f3 inicializa o jogo basically, que na pratica \u00e9 criar um novo objeto da Game.class : C\u00f3digo da VideoPoker.class java public class VideoPoker { public static void main(String[] args) { Game g = new Game(); g.play(); } } // end class VideoPoker \u00c9 chamado o m\u00e9todo play() da classe Game . Este m\u00e9todo \u00e9 um loop infinito onde se joga o jogo. Note O construtor do game cria um objeto da classe Deck e da classe Player . TODO A bet do jogador est\u00e1 hardcoded a 1, tem de ser mudado depois: java // This is game bet that is debited from player's outstanding credit private final int GAME_BET = 1; D\u00e1 print a isto e aguarda instru\u00e7\u00f5es do user: Como \u00e9 q isto funciona? Existe um loop a ver se a resposta \u00e9 de 0-9, se n\u00e3o for ent\u00e3o diz q t\u00e1 inv\u00e1lido e depois pede novamente. Se for 0 ent\u00e3o sai do prog Se for 1-9 ent\u00e3o \u00e9 analisado noutra parte do c\u00f3digo. (break do loop) Loop do user input java title=\"VideoPoker.class\" // This loop will check if the player wants to continue the Game or Exit Scanner scan = new Scanner(System.in); while(true) { String tempValue = scan.nextLine(); if(tempValue.equals(\"9\")) { break; } else if(tempValue.equals(\"0\")) { return; } else { System.out.print(\"Invalid entry. Please try again (Enter value: 0 or 9) - \"); } } Depois \u00e9 feito um Shuffle do baralho. \u00c9 um m\u00e9todo da classe Deck , apropriadamente chamada xD.","title":"Como \u00e9 q isto ta interligado?"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/#deckclass","text":"","title":"Deck.class"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/#criar-o-baralho","text":"1\u00ba - \u00e9 criado (no construtor Deck ) o baralho, basicamente 52 objetos da class Card . Ou melhor, um array de objetos com 52 posi\u00e7\u00f5es. V\u00ea o c\u00f3digo abaixo q percebes. Ele chama este array theDeck . Organiza\u00e7\u00e3o do baralho O gajo q fez isto basicamente usou s\u00f3 inteiros, o q at\u00e9 inteligente porque assim faz combina\u00e7\u00f5es mais facilmente \u00e9 usa menos mem\u00f3ria a comparar cartas por exemplo, acho eu. Tem 2 argumentos/parametros para criar o objeto Card , que \u00e9 o suit e o value . Suit vai de 1-4 (4 nipes) e o value 1-13 (cartas 2-10 + J Q K A) C\u00f3digo para criar o baralho ```java public Deck () { // sendo total_cards = 52 theDeck = new Card [TOTAL_CARDS]; top = 0; Text Only 1 2 3 4 5 6 7 8 9 10 11 12 int suit = 1; int value = 1; for (int i = 0; i < theDeck.length; i++) { theDeck[i] = new Card (suit, value); value++; if (value > 13) { // new suit suit++; value = 1; } } } ``` Criar o deck como queremos Como n\u00f3s queremos ter xH xS xC xD podemos fazer o q escrevi nestes coment\u00e1rios, e posteriormente faziamos a concatena\u00e7\u00e3o do x com o H , v\u00ea se percebes pelos coment\u00e1rios. ```java int suit = 'H'; //neste caso seria string ou char int value = '2'; for (int i = 0; i < theDeck.length; i++) { theDeck[i] = new Card (suit, value); //a primeira itera\u00e7\u00e3o vai criar uma carta 2H Text Only 1 2 3 4 5 6 7 8 9 10 11 12 13 /*Podemos ter um loop dentro de outro loop:*/ /*LOOP DE FORA */ // mudar o nipe! /*LOOP DE DENTRO */ /*temos agora de fazer a itera\u00e7\u00e3o do value de 2-10 verificar se o value j\u00e1 \u00e9 = a 10 e depois passar para J, depois passar para Q depois passar para K depois passar para A muda de nipe no loop de fora*/ } } ```","title":"Criar o baralho"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/#shuffle-do-baralho","text":"O gajo faz 1000 trocas entre 2 cartas com index random do baralho, not sure se \u00e9 a maneira mais eficiente de fazer isto, mas tu \u00e9s o rei do pensamento l\u00f3gico deves saber se h\u00e1 maneira melhor ou n\u00e3o. public void shuffle () { int firstCard = 0; int secondCard = 0; for (int i = 0; i <= 1000; i++) // swaps two Card elements in the Deck { firstCard = (int) (Math.random () * TOTAL_CARDS); secondCard = (int) (Math.random () * TOTAL_CARDS); Card temp = theDeck[firstCard]; theDeck[firstCard] = theDeck[secondCard]; theDeck[secondCard] = temp; } }","title":"Shuffle do baralho"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/analise_vp/#atribuir-mao","text":"Ok, o proximo passo q o gajo faz depois de baralhar o deck \u00e9 dar uma m\u00e3o ao jogador. 1\u00ba ele cria uma arrayList de Card vazia. (no constructor) e atribui os cr\u00e9ditos iniciais ao player, 50.","title":"Atribuir m\u00e3o"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/","text":"Provide six differences, confronting each other, between abstract classes and interfaces. \u00b6 Abstract classes can have abstract and non-abstract methods. Interfaces can only have abstract methods. Abstract classes don\u2019t support multiple inheritance, only single inheritance. Interfaces do support multiple inheritance. An abstract class can extend a concrete class or an abstract class. An interface can only extend an interface. In abstract classes the keyword \u201cabstract\u201d is mandatory to declare a method as abstract. In interfaces the keyword \u201cabstract\u201d is optional. An abstract class can have non-public abstract methods. An interface can only have public abstract methods. An abstract class can have non-static fields, whereas an interface can only have public static final fields. Tickets - UML \u00b6 Example In object-oriented programming, new classes can be defined by extending existing classes. This is an example of: \u00b6 Inheritance The concept of multiple inheritance is implemented in Java by \u00b6 II. Extending one class and implementing one or more interfaces. III. Implementing two or more interfaces. What is printed to the terminal ? \u00b6 Integer i = new Integer(2); Integer j = new Integer(2); System.out.print(i==j); System.out.print(i.equals(j)); FALSE TRUE When does method overriding is determined? \u00b6 At run time. Which interface one should implement to define a natural order? \u00b6 Comparable","title":"Exam"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#provide-six-differences-confronting-each-other-between-abstract-classes-and-interfaces","text":"Abstract classes can have abstract and non-abstract methods. Interfaces can only have abstract methods. Abstract classes don\u2019t support multiple inheritance, only single inheritance. Interfaces do support multiple inheritance. An abstract class can extend a concrete class or an abstract class. An interface can only extend an interface. In abstract classes the keyword \u201cabstract\u201d is mandatory to declare a method as abstract. In interfaces the keyword \u201cabstract\u201d is optional. An abstract class can have non-public abstract methods. An interface can only have public abstract methods. An abstract class can have non-static fields, whereas an interface can only have public static final fields.","title":"Provide six differences, confronting each other, between abstract classes and interfaces."},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#tickets-uml","text":"Example","title":"Tickets - UML"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#in-object-oriented-programming-new-classes-can-be-defined-by-extending-existing-classes-this-is-an-example-of","text":"Inheritance","title":"In object-oriented programming, new classes can be defined by extending existing classes. This is an example of:"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#the-concept-of-multiple-inheritance-is-implemented-in-java-by","text":"II. Extending one class and implementing one or more interfaces. III. Implementing two or more interfaces.","title":"The concept of multiple inheritance is implemented in Java by"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#what-is-printed-to-the-terminal","text":"Integer i = new Integer(2); Integer j = new Integer(2); System.out.print(i==j); System.out.print(i.equals(j)); FALSE TRUE","title":"What is printed to the terminal ?"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#when-does-method-overriding-is-determined","text":"At run time.","title":"When does method overriding is determined?"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/exam/#which-interface-one-should-implement-to-define-a-natural-order","text":"Comparable","title":"Which interface one should implement to define a natural order?"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/java_lab_5/","text":"Instru\u00e7\u00f5es do Lab5 We intend to create a simple tool in Java to create images constituted by characters, called ASCII Art. The class Shape is abstract and it is extended by a Rectangle, a Circle, a Triangle or an Aggregate. An Aggregate is a complex form that combines two or more shapes. This form allows to create complex shapes in a modular way, for instance, it allows to create a house aggregate which is then used in a city aggregate. The method intersection receives an integer y and returns an array of integers which represents the x points such that (x,y) belongs to the respective shape. The class Image has the methods to obtain the ASCII art from combined shapes: The method line receives the number y of the line and returns a String which corresponds to the y-th line of the image of characters. The method toString returns the string with the full image of characters. (a) Implement it in Java. (b) Test your program (in a main method). UML Note No c\u00f3digo a classe \"Shape\" de que a professora fala no enunciado \u00e9 \"Form\". Primeiramente temos uma classe abstract chamada de \"Form\" . Isto porque uma forma \u00e9 abstrata, mas tem algumas coisas em comum, como por exemplo posi\u00e7\u00e3o x e y . ```java title=\"abstract class Form\" hl_lines=\"3 8\" package asciiart.geom; public abstract class Form { Text Only 1 2 3 4 5 6 7 8 9 10 protected int pos_y; protected int pos_x; public Form(int pos_x,int pos_y){ //click me -> (1) this.pos_x=pos_x; this.pos_y=pos_y; } public abstract int[] intersection(int y); } 1. Como \u00e9 uma `abstract` class e n\u00e3o uma `interface` esta pode ter um *constructor*. Classes abstract t\u00eam constructors, interfaces n\u00e3o. As classes `Rectangle`, `Triangle` e `Circumference` s\u00e3o todas Formas, isto \u00e9 v\u00e3o fazer `extend` \u00e0 classe `Form`: ```java title=\"\" public class Rectangle extends Form{","title":"Java lab 5"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/","text":"Instru\u00e7\u00f5es do projeto \u00b6 O projeto vai ser fazer um video poker. Como \u00e9 q isto funciona? Um gajo recebe 5 cartas \u00e0 sorte do baralho, e pode trocar cada carta uma vez. Depois a m\u00e3o final dele \u00e9 comparada com uma tabela de \"m\u00e3os\" e se ele tiver uma m\u00e3o com valor \u00e9 pago consoante o q t\u00e1 na tabela. Combina\u00e7\u00f5es Vitoriosas \u00b6 Paytable \u00b6 Varia\u00e7\u00f5es de jogo \u00b6 A varia\u00e7\u00e3o do jogo vai ser double bonus 10/7 . Tem um retorno de investimento te\u00f3rico de 100.2% quando jogado com a estrat\u00e9gia perfeita. Outside Straight - 3 4 5 6 Q -> carta a trocar nas pontas (para ser uma cena sucessiva) Inside Straight - 3 4 Q 6 7 -> carta a trocar no meio Implementa\u00e7\u00f5es: Straight flush, four of a kind, royal flush 4 to a royal flush 3 ases Straight, Flush, full house Three of a kind (except aces) 6. 4 to a straight flush 7. Two pair 8. High pair 9. 4 to a flush 10. 3 to a royal flush 11. 4 to an outside straight 12. Low pair 13. AKQJ unsuited 14. 3 to a straight flush (type 1) 15. 4 to an inside straight with 3 high cards 16. QJ suited 17. 3 to a flush with 2 high cards 18. 2 suited high cards 19. 4 to an inside straight with 2 high cards 20. 3 to a straight flush (type 2) 21. 4 to an inside straight with 1 high card 22. KQJ unsuited 23. JT suited 24. QJ unsuited 25. 3 to a flush with 1 high card 26. QT suited 27. 3 to a straight flush (type 3) 28. KQ, KJ unsuited 29. Ace 30. KT suited 31. Jack, Queen or King 32. 4 to an inside straight with no high cards 33. 3 to a flush with no high cards 34. Discard everything Modos do programa: \u00b6 Debug mode - O jogo \u00e9 carregado de um ficheiro. Simulation mode - O jogo \u00e9 jogado com a estrat\u00e9gia perfeita para avaliar o retorno do cr\u00e9dito investido do jogador. .Debug Mode \u00b6 ```card-file.txt title=\"card-file.txt\" 2H KH 2S JS 6D JH TC 9H QC AS 8H 8D 7S 3H 7D 5S 7D 4D 5S 7S 3H 4H JS 4S ```cmd-file.txt title=\"cmd-file.txt\" b d h 1 3 $ b 10 b d $ h 3 4 b d a h 1 4 Output ```debug output title=\"output na consola\" java -jar videopoker.jar -d 10000 cmd-file.txt card-file.txt \u00b6 -cmd b player is betting 5 -cmd d player's hand 2H KH 2S JS 6D -cmd h 1 3 player's hand 2H JH 2S TC 9H player loses and his credit is 9995 -cmd $ player's credit is 9995 -cmd b 10 b: illegal amount -cmd b player is betting 5 -cmd d player's hand QC AS 8H 8D 7S -cmd $ player's credit is 9990 -cmd h 3 4 player's hand 3H 7D 8H 8D 5S player loses and his credit is 9990 -cmd b player is betting 5 -cmd d player's hand 7D 4D 5S 7S 3H -cmd a player should hold cards 1 4 -cmd h 1 4 player's hand 7D 4H JS 7S 4S player wins with a TWO PAIR and his credit is 9990 ``` Correr assim: java -jar <<YOUR-JAR-NAME>>.jar -d credit cmd-file card-file Simulation Mode \u00b6 Recebe os parametros: - credit - Balan\u00e7o inicial do jogador. - bet - Valor a apostar por jogada durante a simula\u00e7\u00e3o. - nbdeals - N\u00famero total de deals. A simula\u00e7\u00e3o deve usar sempre a jogada \"perfeita\" seguindo a tap de implementa\u00e7\u00f5es. Warning No final da simula\u00e7\u00e3o tem de se fazer print das estat\u00edsticas Correr assim: java -jar <<YOUR-JAR-NAME>>.jar -s credit bet nbdeals Comandos e resultados \u00b6 Bet b (i) \u00b6 O comando bet pode ser b ou b i em que i \u00e9 o valor da aposta. Se o comando for apenas b ent\u00e3o i ser\u00e1 o valor apostado anteriormente ou 5 caso n\u00e3o haja valor apostado anteriormente. Se o jogador fizer b depois do deal ou durante a jogada do dealer deve-se fazer o print: b: illegal command . V\u00e3o existir outras ocasi\u00f5es onde usar b \u00e9 ilegal e deve-se fazer print de uma cena parecida. Credit $ \u00b6 Pode ser usado a qualquer altura do jogo. Deal d \u00b6 S\u00f3 pode ser usado depois de uma bet b . Hold h \u00b6 S\u00f3 pode ser usado depois de um deal d . h 1 2 -> vai manter as primeiras duas cartas e discard das outras 3. Q\u2666 T\u2666 8\u2665 7\u2663 6\u2660 -> h 1 2 -> Q\u2666 T\u2666 7\u2665 5\u2663 3\u2660 Depois do h ser usado, a consola d\u00e1 print da nova m\u00e3o do jogador. Statistics s \u00b6 D\u00e1 print de uma cena assim: N1...N10 - vezes que a jogada saiu. N11 - Numero de deals desde o inicio do jogo. N13 - Ganho em percentagem relativamente ao ganho inicial \\[ ganho \\% = \\frac{C_f}{C_i}100\\] Advice a \u00b6 Informa qual \u00e9 a jogada que o jogador deve tomar de acordo com a estrat\u00e9gia ideal. Perda e vit\u00f3ria \u00b6 Se o player perder: \u2018\u2018player loses and his credit is C\u2019\u2019 Se o player ganhar: \u2018\u2018player wins with a H and his credit is C\u2019\u2019 C - Cr\u00e9dito atual do jogador. H - M\u00e3o do jogador quando ganha. Ideia do HashMap para a statistic \u00b6 // Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called people HashMap<String, Integer> people = new HashMap<String, Integer>(); // Add keys and values (Name, Age) people.put(\"John\", 32); people.put(\"Steve\", 30); people.put(\"Angie\", 33); for (String i : people.keySet()) { System.out.println(\"Name: \" + i + \" Age: \" + people.get(i)); } people.merge(\"John\",1,Integer::sum); System.out.println(people.get(\"John\")); } } Checkpoints \u00b6 1 - h 1 2 3 4 5 9C 2 - h 1 2 4 5 TD 3 - h 2 3 4 5 9S 4 - h 3 4 5 2C 5 - h 1 2 3 4 5 4C 6- h 1 2 3 4 5 5C 7- h 1 2 3 4 5 3D 8- h 1 2 3 4 5 9- h 1 2 3 4 10- h 2 3 4 5 QS 11- h 4 5 4D 12- h 3 4 2C 13- h 1 3 4 5 8C 14- h 1 2 3 5 2S 15- h 2 3 5 5S 16- h 3 4 5 8C 17- h 2 3 4 5 7C 18- h 2 3 4 5 4H 19- h 2 3 3S 20- h 1 2 9H 21- h 2 3 4 5 8H 22- h 2 3 4 5 8H 23 - h 2 3 4 5 2C 24- h 2 4 5 2H 25 - h 3 4 5 3S 26- h 2 3 4 5 7C 27 - h 2 3 4 5 6C 28 - h 2 3 4 5 3C 29 - h 2 3 4 5 8H - first check at\u00e9 aqui 30 - h 4 5 4S 31 - h 4 5 2C 32 - h 4 5 2H 33 - h 1 4 5 3H 34 h 4 5 4D 35 h 1 4 5 2C 36 h 4 5 6C 37 h 4 5 2S 38 h 2 3 4 5 4C 39 h 2 3 4 5 3D 40 h 2 3 5 2H 41 h 2 3 4 5 4S 42 h 2 3 4 5 2D 43 h 1 2 3 2C 44 h 3 4 2D 45 h 4 5 2D 46 h 4 5 2C 47 h 3 4 3D 48 h 3 4 4D 49 h 2 3 4 5 6S -> muda o 6 p 9 50 h 4 5 2C 51 h 4 5 2S 52 h 4 5 3S 53 h 4 5 5H 54 h 3 4 4H 55 h 4 5 2D 56 h 3 4 5 2D 57 h 2 3 4 2C 58 h 1 4 5 5D 59 h 3 4 5 2D 60 h 1 3 5 6C 61 h 4 5 2C 62 h 3 4 4C 63 h 3 4 6S 64 h 4 5 6S 65 H 4 5 3H 66 h 1 2 3 5C 67 h 123 3H 68 h 123 2C 69 h124 2D 70 h 4C 71 h 4 5 4D 72 h 4 5 3D 73 4S 74 5S 75 5H 76 h 5 2C 77 6C 78 h 1 2 3 3H 79 h 5 2S 80 h 5 2H 81 h 1 2 3 4 2D","title":"Projeto"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#instrucoes-do-projeto","text":"O projeto vai ser fazer um video poker. Como \u00e9 q isto funciona? Um gajo recebe 5 cartas \u00e0 sorte do baralho, e pode trocar cada carta uma vez. Depois a m\u00e3o final dele \u00e9 comparada com uma tabela de \"m\u00e3os\" e se ele tiver uma m\u00e3o com valor \u00e9 pago consoante o q t\u00e1 na tabela.","title":"Instru\u00e7\u00f5es do projeto"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#combinacoes-vitoriosas","text":"","title":"Combina\u00e7\u00f5es Vitoriosas"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#paytable","text":"","title":"Paytable"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#variacoes-de-jogo","text":"A varia\u00e7\u00e3o do jogo vai ser double bonus 10/7 . Tem um retorno de investimento te\u00f3rico de 100.2% quando jogado com a estrat\u00e9gia perfeita. Outside Straight - 3 4 5 6 Q -> carta a trocar nas pontas (para ser uma cena sucessiva) Inside Straight - 3 4 Q 6 7 -> carta a trocar no meio Implementa\u00e7\u00f5es: Straight flush, four of a kind, royal flush 4 to a royal flush 3 ases Straight, Flush, full house Three of a kind (except aces) 6. 4 to a straight flush 7. Two pair 8. High pair 9. 4 to a flush 10. 3 to a royal flush 11. 4 to an outside straight 12. Low pair 13. AKQJ unsuited 14. 3 to a straight flush (type 1) 15. 4 to an inside straight with 3 high cards 16. QJ suited 17. 3 to a flush with 2 high cards 18. 2 suited high cards 19. 4 to an inside straight with 2 high cards 20. 3 to a straight flush (type 2) 21. 4 to an inside straight with 1 high card 22. KQJ unsuited 23. JT suited 24. QJ unsuited 25. 3 to a flush with 1 high card 26. QT suited 27. 3 to a straight flush (type 3) 28. KQ, KJ unsuited 29. Ace 30. KT suited 31. Jack, Queen or King 32. 4 to an inside straight with no high cards 33. 3 to a flush with no high cards 34. Discard everything","title":"Varia\u00e7\u00f5es de jogo"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#modos-do-programa","text":"Debug mode - O jogo \u00e9 carregado de um ficheiro. Simulation mode - O jogo \u00e9 jogado com a estrat\u00e9gia perfeita para avaliar o retorno do cr\u00e9dito investido do jogador.","title":"Modos do programa:"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#debug-mode","text":"```card-file.txt title=\"card-file.txt\" 2H KH 2S JS 6D JH TC 9H QC AS 8H 8D 7S 3H 7D 5S 7D 4D 5S 7S 3H 4H JS 4S ```cmd-file.txt title=\"cmd-file.txt\" b d h 1 3 $ b 10 b d $ h 3 4 b d a h 1 4 Output ```debug output title=\"output na consola\"","title":".Debug Mode"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#java-jar-videopokerjar-d-10000-cmd-filetxt-card-filetxt","text":"-cmd b player is betting 5 -cmd d player's hand 2H KH 2S JS 6D -cmd h 1 3 player's hand 2H JH 2S TC 9H player loses and his credit is 9995 -cmd $ player's credit is 9995 -cmd b 10 b: illegal amount -cmd b player is betting 5 -cmd d player's hand QC AS 8H 8D 7S -cmd $ player's credit is 9990 -cmd h 3 4 player's hand 3H 7D 8H 8D 5S player loses and his credit is 9990 -cmd b player is betting 5 -cmd d player's hand 7D 4D 5S 7S 3H -cmd a player should hold cards 1 4 -cmd h 1 4 player's hand 7D 4H JS 7S 4S player wins with a TWO PAIR and his credit is 9990 ``` Correr assim: java -jar <<YOUR-JAR-NAME>>.jar -d credit cmd-file card-file","title":"java -jar videopoker.jar -d 10000 cmd-file.txt card-file.txt"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#simulation-mode","text":"Recebe os parametros: - credit - Balan\u00e7o inicial do jogador. - bet - Valor a apostar por jogada durante a simula\u00e7\u00e3o. - nbdeals - N\u00famero total de deals. A simula\u00e7\u00e3o deve usar sempre a jogada \"perfeita\" seguindo a tap de implementa\u00e7\u00f5es. Warning No final da simula\u00e7\u00e3o tem de se fazer print das estat\u00edsticas Correr assim: java -jar <<YOUR-JAR-NAME>>.jar -s credit bet nbdeals","title":"Simulation Mode"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#comandos-e-resultados","text":"","title":"Comandos e resultados"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#bet-b-i","text":"O comando bet pode ser b ou b i em que i \u00e9 o valor da aposta. Se o comando for apenas b ent\u00e3o i ser\u00e1 o valor apostado anteriormente ou 5 caso n\u00e3o haja valor apostado anteriormente. Se o jogador fizer b depois do deal ou durante a jogada do dealer deve-se fazer o print: b: illegal command . V\u00e3o existir outras ocasi\u00f5es onde usar b \u00e9 ilegal e deve-se fazer print de uma cena parecida.","title":"Bet b (i)"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#credit","text":"Pode ser usado a qualquer altura do jogo.","title":"Credit $"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#deal-d","text":"S\u00f3 pode ser usado depois de uma bet b .","title":"Deal d"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#hold-h","text":"S\u00f3 pode ser usado depois de um deal d . h 1 2 -> vai manter as primeiras duas cartas e discard das outras 3. Q\u2666 T\u2666 8\u2665 7\u2663 6\u2660 -> h 1 2 -> Q\u2666 T\u2666 7\u2665 5\u2663 3\u2660 Depois do h ser usado, a consola d\u00e1 print da nova m\u00e3o do jogador.","title":"Hold h"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#statistics-s","text":"D\u00e1 print de uma cena assim: N1...N10 - vezes que a jogada saiu. N11 - Numero de deals desde o inicio do jogo. N13 - Ganho em percentagem relativamente ao ganho inicial \\[ ganho \\% = \\frac{C_f}{C_i}100\\]","title":"Statistics s"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#advice-a","text":"Informa qual \u00e9 a jogada que o jogador deve tomar de acordo com a estrat\u00e9gia ideal.","title":"Advice a"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#perda-e-vitoria","text":"Se o player perder: \u2018\u2018player loses and his credit is C\u2019\u2019 Se o player ganhar: \u2018\u2018player wins with a H and his credit is C\u2019\u2019 C - Cr\u00e9dito atual do jogador. H - M\u00e3o do jogador quando ganha.","title":"Perda e vit\u00f3ria"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#ideia-do-hashmap-para-a-statistic","text":"// Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called people HashMap<String, Integer> people = new HashMap<String, Integer>(); // Add keys and values (Name, Age) people.put(\"John\", 32); people.put(\"Steve\", 30); people.put(\"Angie\", 33); for (String i : people.keySet()) { System.out.println(\"Name: \" + i + \" Age: \" + people.get(i)); } people.merge(\"John\",1,Integer::sum); System.out.println(people.get(\"John\")); } }","title":"Ideia do HashMap para a statistic"},{"location":"IST/3%C2%BA%20Ano%20/programa%C3%A7%C3%A3o_orientada_por_objetos/projeto/#checkpoints","text":"1 - h 1 2 3 4 5 9C 2 - h 1 2 4 5 TD 3 - h 2 3 4 5 9S 4 - h 3 4 5 2C 5 - h 1 2 3 4 5 4C 6- h 1 2 3 4 5 5C 7- h 1 2 3 4 5 3D 8- h 1 2 3 4 5 9- h 1 2 3 4 10- h 2 3 4 5 QS 11- h 4 5 4D 12- h 3 4 2C 13- h 1 3 4 5 8C 14- h 1 2 3 5 2S 15- h 2 3 5 5S 16- h 3 4 5 8C 17- h 2 3 4 5 7C 18- h 2 3 4 5 4H 19- h 2 3 3S 20- h 1 2 9H 21- h 2 3 4 5 8H 22- h 2 3 4 5 8H 23 - h 2 3 4 5 2C 24- h 2 4 5 2H 25 - h 3 4 5 3S 26- h 2 3 4 5 7C 27 - h 2 3 4 5 6C 28 - h 2 3 4 5 3C 29 - h 2 3 4 5 8H - first check at\u00e9 aqui 30 - h 4 5 4S 31 - h 4 5 2C 32 - h 4 5 2H 33 - h 1 4 5 3H 34 h 4 5 4D 35 h 1 4 5 2C 36 h 4 5 6C 37 h 4 5 2S 38 h 2 3 4 5 4C 39 h 2 3 4 5 3D 40 h 2 3 5 2H 41 h 2 3 4 5 4S 42 h 2 3 4 5 2D 43 h 1 2 3 2C 44 h 3 4 2D 45 h 4 5 2D 46 h 4 5 2C 47 h 3 4 3D 48 h 3 4 4D 49 h 2 3 4 5 6S -> muda o 6 p 9 50 h 4 5 2C 51 h 4 5 2S 52 h 4 5 3S 53 h 4 5 5H 54 h 3 4 4H 55 h 4 5 2D 56 h 3 4 5 2D 57 h 2 3 4 2C 58 h 1 4 5 5D 59 h 3 4 5 2D 60 h 1 3 5 6C 61 h 4 5 2C 62 h 3 4 4C 63 h 3 4 6S 64 h 4 5 6S 65 H 4 5 3H 66 h 1 2 3 5C 67 h 123 3H 68 h 123 2C 69 h124 2D 70 h 4C 71 h 4 5 4D 72 h 4 5 3D 73 4S 74 5S 75 5H 76 h 5 2C 77 6C 78 h 1 2 3 3H 79 h 5 2S 80 h 5 2H 81 h 1 2 3 4 2D","title":"Checkpoints"},{"location":"Misc/Markdown_Tests/","text":"theme: features: - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be expressed in Markdown. item 1 item A item B more text item a item b item c item C item 2 item 3 Bash Explanation ```bash !/bin/bash \u00b6 echo \"Hello world!\" ``` This is only a short example of how to make tabs. text text text !/bin/bash \u00b6 grep $1 $2 !/bin/bash \u00b6 grep $1 $2 \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] python title=\"Bubble sort\" hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] 0% 5% 25% 45% 65% 85% 100% ready Ctrl + Alt + Del","title":"Markdown Tests"},{"location":"Misc/Markdown_Tests/#binbash","text":"echo \"Hello world!\" ``` This is only a short example of how to make tabs. text text text","title":"!/bin/bash"},{"location":"Misc/Markdown_Tests/#binbash_1","text":"grep $1 $2","title":"!/bin/bash"},{"location":"Misc/Markdown_Tests/#binbash_2","text":"grep $1 $2 \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] python title=\"Bubble sort\" hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] 0% 5% 25% 45% 65% 85% 100% ready Ctrl + Alt + Del","title":"!/bin/bash"},{"location":"Misc/links/","text":"Links to Save: \u00b6 TI-Nspire Stuff HP_AudioBook Money Bar - por subscrever","title":"Links"},{"location":"Misc/links/#links-to-save","text":"TI-Nspire Stuff HP_AudioBook Money Bar - por subscrever","title":"Links to Save:"},{"location":"Misc/warframe/warframe/","text":"Framedex \u00b6 My Framedex Nice Relic Info Shits to do in Warframe \u00b6 Fazer uma 1-7-7 -> Best amp for eidolon Get a Magus Repair Get a Magus Melt Get Virtuous Shadow to lvl 5 NEED 2 MORE Build Volt ! Maxed Caliban Comprar o Erradicate ao Cavalero, preciso de mais 6 Build Phenmor Eidolon Hunting SOLO \u00b6 Volt Prime \u00b6 Zenith \u00b6 O mod escondido \u00e9 o Hellfire","title":"Warframe"},{"location":"Misc/warframe/warframe/#framedex","text":"My Framedex Nice Relic Info","title":"Framedex"},{"location":"Misc/warframe/warframe/#shits-to-do-in-warframe","text":"Fazer uma 1-7-7 -> Best amp for eidolon Get a Magus Repair Get a Magus Melt Get Virtuous Shadow to lvl 5 NEED 2 MORE Build Volt ! Maxed Caliban Comprar o Erradicate ao Cavalero, preciso de mais 6 Build Phenmor","title":"Shits to do in Warframe"},{"location":"Misc/warframe/warframe/#eidolon-hunting-solo","text":"","title":"Eidolon Hunting SOLO"},{"location":"Misc/warframe/warframe/#volt-prime","text":"","title":"Volt Prime"},{"location":"Misc/warframe/warframe/#zenith","text":"O mod escondido \u00e9 o Hellfire","title":"Zenith"},{"location":"Programming/data_types/","text":"Data Types \u00b6 \\[ 1 byte (B) = 8 bits \\] Data Type Size Description byte 1 byte Stores whole numbers from -128 to 127 short 2 bytes Stores whole numbers from -32,768 to 32,767 int 4 bytes Stores whole numbers from -2,147,483,648 to 2,147,483,647 long 8 bytes Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 float 4 bytes Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits double 8 bytes Stores fractional numbers. Sufficient for storing 15 decimal digits boolean 1 bit Stores true or false values char 2 bytes Stores a single character/letter or ASCII values Byte \u00b6 The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127. Short \u00b6 The short data type can store whole numbers from -32768 to 32767. Int \u00b6 The int data type can store whole numbers from -2147483648 to 2147483647. In general, the int data type is the preferred data type when we create variables with a numeric value. Long \u00b6 The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\" (Java): (java) long myNum = 15000000000L; Floating Point Types \u00b6 You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515. The float and double data types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles: (java) double myNum = 19.99d; float myNum = 5.75f; Scientific Numbers \u00b6 A floating point number can also be a scientific number with an \"e\" to indicate the power of 10: float f1 = 35e3f;","title":"Data types"},{"location":"Programming/data_types/#data-types","text":"\\[ 1 byte (B) = 8 bits \\] Data Type Size Description byte 1 byte Stores whole numbers from -128 to 127 short 2 bytes Stores whole numbers from -32,768 to 32,767 int 4 bytes Stores whole numbers from -2,147,483,648 to 2,147,483,647 long 8 bytes Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 float 4 bytes Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits double 8 bytes Stores fractional numbers. Sufficient for storing 15 decimal digits boolean 1 bit Stores true or false values char 2 bytes Stores a single character/letter or ASCII values","title":"Data Types"},{"location":"Programming/data_types/#byte","text":"The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127.","title":"Byte"},{"location":"Programming/data_types/#short","text":"The short data type can store whole numbers from -32768 to 32767.","title":"Short"},{"location":"Programming/data_types/#int","text":"The int data type can store whole numbers from -2147483648 to 2147483647. In general, the int data type is the preferred data type when we create variables with a numeric value.","title":"Int"},{"location":"Programming/data_types/#long","text":"The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\" (Java): (java) long myNum = 15000000000L;","title":"Long"},{"location":"Programming/data_types/#floating-point-types","text":"You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515. The float and double data types can store fractional numbers. Note that you should end the value with an \"f\" for floats and \"d\" for doubles: (java) double myNum = 19.99d; float myNum = 5.75f;","title":"Floating Point Types"},{"location":"Programming/data_types/#scientific-numbers","text":"A floating point number can also be a scientific number with an \"e\" to indicate the power of 10: float f1 = 35e3f;","title":"Scientific Numbers"},{"location":"Programming/markdown-cheat-sheet/","text":"Markdown Equations \u00b6 \u00c9 possivel escrever equa\u00e7\u00f5es em MarkDown no formato LaTeX: $\\sqrt{25}=5$ \\(\\rightarrow\\) \\(\\sqrt{25}=5\\) Markdown no VSCode \u00b6 Ctrl+Shift+V - Ativa o preview do VSCode Ctrl+\\ - Split screen Ctrl+J - Abre terminal Ctrl+Space - Aparece um pop up muito util das snippets do VSCode Ctrl+Shift+P: Snippet Ranger - Extens\u00e3o muito util para usar snippets, e d\u00e1 para criar os teus pr\u00f3prios. Markdown All in One Extension \u00b6 Command Usage Ctrl + B Toggle bold Ctrl + I Toggle italic Alt+S (on Windows) Toggle strikethrough1 Ctrl + Shift + ] Toggle heading (uplevel) Ctrl + Shift + [ Toggle heading (downlevel) Ctrl/Cmd + M Toggle math environment Alt + C Check/Uncheck task list item Ctrl/Cmd + Shift + V Toggle preview Ctrl/Cmd + K V Toggle preview to side Alt*Shift+F Align Table Class Diagram Example / UML \u00b6 UML Image made with Mermaid Mkdocs Usage \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Mete o que escreves no GitPages (este site) Admonitions \u00b6 Cenas bu\u00e9 \u00fateis quando queremos chamar a aten\u00e7\u00e3o para alguma cena. Eye catching! Admonitions Examples Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Normal\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Com titulo mudado\" Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Sem t\u00edtulo\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Hidden\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Expanded\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"\" Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"\" Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Admonition Types \u00b6 Note note Abstract abstract , summary , tldr Info info , todo Tip tip , hint , important Success success , done , check Question question , help , faq Warning warning , caution , attention Failure failure , fail , missing Danger error , danger Bug bug Example example Quote quote But\u00f5es \u00b6 Tamb\u00e9m d\u00e1 para meter but\u00f5es C\u00f3digo para But\u00e3o markdown title=\"\" [Tamb\u00e9m d\u00e1 para meter but\u00f5es](https://python-markdown.github.io/extensions/attr_list/){ .md-button .md-button--primary } Markdown Cheat Sheet \u00b6 Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax . Basic Syntax \u00b6 These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements. Heading \u00b6 H1 \u00b6 H2 \u00b6 H3 \u00b6 Bold \u00b6 bold text Italic \u00b6 italicized text Blockquote \u00b6 blockquote Ordered List \u00b6 First item Second item Third item Unordered List \u00b6 First item Second item Third item Code \u00b6 code Horizontal Rule \u00b6 Link \u00b6 Markdown Guide Image \u00b6 Extended Syntax \u00b6 These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table \u00b6 Syntax Description Header Title Paragraph Text Fenced Code Block \u00b6 { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote \u00b6 Here's a sentence with a footnote. 1 Heading ID \u00b6 My Great Heading \u00b6 Definition List \u00b6 term definition Strikethrough \u00b6 The world is flat. Task List \u00b6 Write the press release Update the website Contact the media Emoji \u00b6 That is so funny! (See also Copying and Pasting Emoji ) Highlight \u00b6 I need to highlight these very important words . Subscript \u00b6 H 2 O Superscript \u00b6 X 2 This is the footnote. \u21a9","title":"Markdown cheat sheet"},{"location":"Programming/markdown-cheat-sheet/#markdown-equations","text":"\u00c9 possivel escrever equa\u00e7\u00f5es em MarkDown no formato LaTeX: $\\sqrt{25}=5$ \\(\\rightarrow\\) \\(\\sqrt{25}=5\\)","title":"Markdown Equations"},{"location":"Programming/markdown-cheat-sheet/#markdown-no-vscode","text":"Ctrl+Shift+V - Ativa o preview do VSCode Ctrl+\\ - Split screen Ctrl+J - Abre terminal Ctrl+Space - Aparece um pop up muito util das snippets do VSCode Ctrl+Shift+P: Snippet Ranger - Extens\u00e3o muito util para usar snippets, e d\u00e1 para criar os teus pr\u00f3prios.","title":"Markdown no VSCode"},{"location":"Programming/markdown-cheat-sheet/#markdown-all-in-one-extension","text":"Command Usage Ctrl + B Toggle bold Ctrl + I Toggle italic Alt+S (on Windows) Toggle strikethrough1 Ctrl + Shift + ] Toggle heading (uplevel) Ctrl + Shift + [ Toggle heading (downlevel) Ctrl/Cmd + M Toggle math environment Alt + C Check/Uncheck task list item Ctrl/Cmd + Shift + V Toggle preview Ctrl/Cmd + K V Toggle preview to side Alt*Shift+F Align Table","title":"Markdown All in One Extension"},{"location":"Programming/markdown-cheat-sheet/#class-diagram-example-uml","text":"UML Image made with Mermaid","title":"Class Diagram Example / UML"},{"location":"Programming/markdown-cheat-sheet/#mkdocs-usage","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Mete o que escreves no GitPages (este site)","title":"Mkdocs Usage"},{"location":"Programming/markdown-cheat-sheet/#admonitions","text":"Cenas bu\u00e9 \u00fateis quando queremos chamar a aten\u00e7\u00e3o para alguma cena. Eye catching! Admonitions Examples Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Normal\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Com titulo mudado\" Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Sem t\u00edtulo\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Hidden\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"Expanded\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"\" Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```markdown title=\"\" Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ```","title":"Admonitions"},{"location":"Programming/markdown-cheat-sheet/#admonition-types","text":"Note note Abstract abstract , summary , tldr Info info , todo Tip tip , hint , important Success success , done , check Question question , help , faq Warning warning , caution , attention Failure failure , fail , missing Danger error , danger Bug bug Example example Quote quote","title":"Admonition Types"},{"location":"Programming/markdown-cheat-sheet/#butoes","text":"Tamb\u00e9m d\u00e1 para meter but\u00f5es C\u00f3digo para But\u00e3o markdown title=\"\" [Tamb\u00e9m d\u00e1 para meter but\u00f5es](https://python-markdown.github.io/extensions/attr_list/){ .md-button .md-button--primary }","title":"But\u00f5es"},{"location":"Programming/markdown-cheat-sheet/#markdown-cheat-sheet","text":"Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax .","title":"Markdown Cheat Sheet"},{"location":"Programming/markdown-cheat-sheet/#basic-syntax","text":"These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.","title":"Basic Syntax"},{"location":"Programming/markdown-cheat-sheet/#heading","text":"","title":"Heading"},{"location":"Programming/markdown-cheat-sheet/#h1","text":"","title":"H1"},{"location":"Programming/markdown-cheat-sheet/#h2","text":"","title":"H2"},{"location":"Programming/markdown-cheat-sheet/#h3","text":"","title":"H3"},{"location":"Programming/markdown-cheat-sheet/#bold","text":"bold text","title":"Bold"},{"location":"Programming/markdown-cheat-sheet/#italic","text":"italicized text","title":"Italic"},{"location":"Programming/markdown-cheat-sheet/#blockquote","text":"blockquote","title":"Blockquote"},{"location":"Programming/markdown-cheat-sheet/#ordered-list","text":"First item Second item Third item","title":"Ordered List"},{"location":"Programming/markdown-cheat-sheet/#unordered-list","text":"First item Second item Third item","title":"Unordered List"},{"location":"Programming/markdown-cheat-sheet/#code","text":"code","title":"Code"},{"location":"Programming/markdown-cheat-sheet/#horizontal-rule","text":"","title":"Horizontal Rule"},{"location":"Programming/markdown-cheat-sheet/#link","text":"Markdown Guide","title":"Link"},{"location":"Programming/markdown-cheat-sheet/#image","text":"","title":"Image"},{"location":"Programming/markdown-cheat-sheet/#extended-syntax","text":"These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.","title":"Extended Syntax"},{"location":"Programming/markdown-cheat-sheet/#table","text":"Syntax Description Header Title Paragraph Text","title":"Table"},{"location":"Programming/markdown-cheat-sheet/#fenced-code-block","text":"{ \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 }","title":"Fenced Code Block"},{"location":"Programming/markdown-cheat-sheet/#footnote","text":"Here's a sentence with a footnote. 1","title":"Footnote"},{"location":"Programming/markdown-cheat-sheet/#heading-id","text":"","title":"Heading ID"},{"location":"Programming/markdown-cheat-sheet/#custom-id","text":"","title":"My Great Heading"},{"location":"Programming/markdown-cheat-sheet/#definition-list","text":"term definition","title":"Definition List"},{"location":"Programming/markdown-cheat-sheet/#strikethrough","text":"The world is flat.","title":"Strikethrough"},{"location":"Programming/markdown-cheat-sheet/#task-list","text":"Write the press release Update the website Contact the media","title":"Task List"},{"location":"Programming/markdown-cheat-sheet/#emoji","text":"That is so funny! (See also Copying and Pasting Emoji )","title":"Emoji"},{"location":"Programming/markdown-cheat-sheet/#highlight","text":"I need to highlight these very important words .","title":"Highlight"},{"location":"Programming/markdown-cheat-sheet/#subscript","text":"H 2 O","title":"Subscript"},{"location":"Programming/markdown-cheat-sheet/#superscript","text":"X 2 This is the footnote. \u21a9","title":"Superscript"},{"location":"Programming/prog_index/","text":"Java Data Types","title":"Prog index"},{"location":"Programming/Java/java_basics/","text":"Java \"Rules\" \u00b6 Java is case-sensitive: \"MyClass\" and \"myclass\" has different meaning. Every line of code that runs in Java must be inside a class. A class should always start with an uppercase first letter. The name of the java file must match the class name. Strings \u00b6 String Length \u00b6 Retorna o tamanho da String. String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length()); toUpperCase() & toLowerCase() \u00b6 String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\" indexOf() \u00b6 String txt = \"Please locate where 'locate' occurs!\"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7 String Concatenation \u00b6 Existem 2 m\u00e9todos: String firstName = \"John\"; String lastName = \"Doe\"; System.out.println(firstName + \" \" + lastName); String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName)); Nota: Se adicionarmos um n\u00famero e uma string, o resultado ser\u00e1 uma string concatenation. (o inteiro passa a string). String x = \"10\"; int y = 20; String z = x + y; // z will be 1020 (a String) Java Math \u00b6 M\u00e9todo Descri\u00e7\u00e3o Math.max(x,y) Retorna valor m\u00e1ximo entre x e y Math.min(x,y) Retorna valor minimo entre x e y Math.sqrt(x) Retorna a raiz quadrada de x Math.abs(x) Retorna o m\u00f3dulo de x Math.random() Retorna um numero entre 0.0 (inclusive) e 1.0 Short If..Else \u00b6 variable = (condition) ? expressionTrue : expressionFalse; int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening.\"; System.out.println(result); For Each Loop \u00b6 for (type variableName : arrayName) { // code block to be executed } String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); } Multidimensional Arrays \u00b6 class apples{ public static void main(String[] args) { int firstarray[][]={{8,9,10,11},{12,13,14,15}}; int secondarray[][]={{30,31,32,33},{34},{35,36}} System.out.println(\"This is the first array\"); display(firstarray); System.out.println(\"This is the second array\"); display(secondarray); } //cicle through the array public static void display(int x[][] /*receives the multidimensional array like this*/) { for(int row=0; row < x.length; row++){ //x.length gives the number the arrays the MD array has. // firstarray.length=2, second array.length=3 //ou seja, isto diz quantas linhas \u00e9 que o MD array tem for(int col=0; col<x[row].length; col++){ //se fizermos firstarray[0].length = 4, logo temos //4 colunas olhando para a primeira linha do MD Array System.out.print(x[row][col]+\"\\t\"); } System.out.println(); //new line (mete um \\n basically) } } } Classes and Objects \u00b6 Classes and objects are the two main aspects of object-oriented programming. So, a class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the variables and methods from the class. Class \u00b6 Class named \"Main\" with a variable x: public class Main { int x = 5; } Object \u00b6 Um objeto \u00e9 criado a partir de uma classe. Neste caso vamos criar um objeto da classe Main chamado myObj. public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } } Podem ser criados mais do que um objeto da mesma classe. Multiple Classes \u00b6 \u00c9 poss\u00edvel criar uma classe a aceder a esta noutra classe. Isto \u00e9 \u00fatil em termos de organizar as classes. Exemplo: Uma classe tem todos os atributos e m\u00e9todos e outra tem a main() , onde est\u00e1 o c\u00f3digo a ser executado. Main.java public class Main { int x = 5; } Second.java class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Java Attributes \u00b6 As \"vari\u00e1veis\" das classes, na verdade, s\u00e3o atributos das classes. Por exemplo, uma classe, Main() , que tem dois atributos, x e y : public class Main { int x = 5; int y = 3; } Accessing Attributes \u00b6 Podemos aceder a atributos das classes, primeiramente criando um objeto da mesma e depois usando o operador . . Por exemplo, aqui estamos a aceder ao atributo x do objeto myObj da classe Main . public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } Modifying Attributes \u00b6 public class Main { int x; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 40; System.out.println(myObj.x); } } Caso x j\u00e1 tivesse um valor, por exemplo int x = 5; este seria reescrito com o valor 40. SE n\u00e3o quisermos que o valor seja edit\u00e1vel ent\u00e3o declaramos o atributo como final : final int x = 10; Multiple Objects and Attributes \u00b6 Se criarmos v\u00e1rios objetos de uma classe, os valores dos seus atributos n\u00e3o s\u00e3o partilhados, s\u00e3o independentes, logo podemos mudar os atributos de um objeto sem alterar os dos restantes. public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 myObj2.x = 25; System.out.println(myObj1.x); // Outputs 5 System.out.println(myObj2.x); // Outputs 25 } } ``` ### Multiple Attributes Podem ser criados tantos atributos quanto quisermos. ```java public class Main { String fname = \"John\"; String lname = \"Doe\"; int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Age: \" + myObj.age); } } Java Methods \u00b6 Quote A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions. Why use methods? To reuse code: define the code once, and use it many times. Os m\u00e9todos s\u00e3o declarados dentro das classes. Kinda like fun\u00e7\u00f5es em C. ```java title=\"M\u00e9todo em Java\" public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\" ### Method Parameters \u00c9 poss\u00edvel passar par\u00e2metros (argumentos) para m\u00e9todos, isto faz-se facilmente inserindo o par\u00e2metro a passar nos `()` do m\u00e9todo: !!! example ```java title=\"Passagem de Par\u00e2metros\" public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes","title":"Java basics"},{"location":"Programming/Java/java_basics/#java-rules","text":"Java is case-sensitive: \"MyClass\" and \"myclass\" has different meaning. Every line of code that runs in Java must be inside a class. A class should always start with an uppercase first letter. The name of the java file must match the class name.","title":"Java \"Rules\""},{"location":"Programming/Java/java_basics/#strings","text":"","title":"Strings"},{"location":"Programming/Java/java_basics/#string-length","text":"Retorna o tamanho da String. String txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; System.out.println(\"The length of the txt string is: \" + txt.length());","title":"String Length"},{"location":"Programming/Java/java_basics/#touppercase-tolowercase","text":"String txt = \"Hello World\"; System.out.println(txt.toUpperCase()); // Outputs \"HELLO WORLD\" System.out.println(txt.toLowerCase()); // Outputs \"hello world\"","title":"toUpperCase() &amp; toLowerCase()"},{"location":"Programming/Java/java_basics/#indexof","text":"String txt = \"Please locate where 'locate' occurs!\"; System.out.println(txt.indexOf(\"locate\")); // Outputs 7","title":"indexOf()"},{"location":"Programming/Java/java_basics/#string-concatenation","text":"Existem 2 m\u00e9todos: String firstName = \"John\"; String lastName = \"Doe\"; System.out.println(firstName + \" \" + lastName); String firstName = \"John \"; String lastName = \"Doe\"; System.out.println(firstName.concat(lastName)); Nota: Se adicionarmos um n\u00famero e uma string, o resultado ser\u00e1 uma string concatenation. (o inteiro passa a string). String x = \"10\"; int y = 20; String z = x + y; // z will be 1020 (a String)","title":"String Concatenation"},{"location":"Programming/Java/java_basics/#java-math","text":"M\u00e9todo Descri\u00e7\u00e3o Math.max(x,y) Retorna valor m\u00e1ximo entre x e y Math.min(x,y) Retorna valor minimo entre x e y Math.sqrt(x) Retorna a raiz quadrada de x Math.abs(x) Retorna o m\u00f3dulo de x Math.random() Retorna um numero entre 0.0 (inclusive) e 1.0","title":"Java Math"},{"location":"Programming/Java/java_basics/#short-ifelse","text":"variable = (condition) ? expressionTrue : expressionFalse; int time = 20; String result = (time < 18) ? \"Good day.\" : \"Good evening.\"; System.out.println(result);","title":"Short If..Else"},{"location":"Programming/Java/java_basics/#for-each-loop","text":"for (type variableName : arrayName) { // code block to be executed } String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"}; for (String i : cars) { System.out.println(i); }","title":"For Each Loop"},{"location":"Programming/Java/java_basics/#multidimensional-arrays","text":"class apples{ public static void main(String[] args) { int firstarray[][]={{8,9,10,11},{12,13,14,15}}; int secondarray[][]={{30,31,32,33},{34},{35,36}} System.out.println(\"This is the first array\"); display(firstarray); System.out.println(\"This is the second array\"); display(secondarray); } //cicle through the array public static void display(int x[][] /*receives the multidimensional array like this*/) { for(int row=0; row < x.length; row++){ //x.length gives the number the arrays the MD array has. // firstarray.length=2, second array.length=3 //ou seja, isto diz quantas linhas \u00e9 que o MD array tem for(int col=0; col<x[row].length; col++){ //se fizermos firstarray[0].length = 4, logo temos //4 colunas olhando para a primeira linha do MD Array System.out.print(x[row][col]+\"\\t\"); } System.out.println(); //new line (mete um \\n basically) } } }","title":"Multidimensional Arrays"},{"location":"Programming/Java/java_basics/#classes-and-objects","text":"Classes and objects are the two main aspects of object-oriented programming. So, a class is a template for objects, and an object is an instance of a class. When the individual objects are created, they inherit all the variables and methods from the class.","title":"Classes and Objects"},{"location":"Programming/Java/java_basics/#class","text":"Class named \"Main\" with a variable x: public class Main { int x = 5; }","title":"Class"},{"location":"Programming/Java/java_basics/#object","text":"Um objeto \u00e9 criado a partir de uma classe. Neste caso vamos criar um objeto da classe Main chamado myObj. public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } } Podem ser criados mais do que um objeto da mesma classe.","title":"Object"},{"location":"Programming/Java/java_basics/#multiple-classes","text":"\u00c9 poss\u00edvel criar uma classe a aceder a esta noutra classe. Isto \u00e9 \u00fatil em termos de organizar as classes. Exemplo: Uma classe tem todos os atributos e m\u00e9todos e outra tem a main() , onde est\u00e1 o c\u00f3digo a ser executado. Main.java public class Main { int x = 5; } Second.java class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }","title":"Multiple Classes"},{"location":"Programming/Java/java_basics/#java-attributes","text":"As \"vari\u00e1veis\" das classes, na verdade, s\u00e3o atributos das classes. Por exemplo, uma classe, Main() , que tem dois atributos, x e y : public class Main { int x = 5; int y = 3; }","title":"Java Attributes"},{"location":"Programming/Java/java_basics/#accessing-attributes","text":"Podemos aceder a atributos das classes, primeiramente criando um objeto da mesma e depois usando o operador . . Por exemplo, aqui estamos a aceder ao atributo x do objeto myObj da classe Main . public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } }","title":"Accessing Attributes"},{"location":"Programming/Java/java_basics/#modifying-attributes","text":"public class Main { int x; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 40; System.out.println(myObj.x); } } Caso x j\u00e1 tivesse um valor, por exemplo int x = 5; este seria reescrito com o valor 40. SE n\u00e3o quisermos que o valor seja edit\u00e1vel ent\u00e3o declaramos o atributo como final : final int x = 10;","title":"Modifying Attributes"},{"location":"Programming/Java/java_basics/#multiple-objects-and-attributes","text":"Se criarmos v\u00e1rios objetos de uma classe, os valores dos seus atributos n\u00e3o s\u00e3o partilhados, s\u00e3o independentes, logo podemos mudar os atributos de um objeto sem alterar os dos restantes. public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 myObj2.x = 25; System.out.println(myObj1.x); // Outputs 5 System.out.println(myObj2.x); // Outputs 25 } } ``` ### Multiple Attributes Podem ser criados tantos atributos quanto quisermos. ```java public class Main { String fname = \"John\"; String lname = \"Doe\"; int age = 24; public static void main(String[] args) { Main myObj = new Main(); System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname); System.out.println(\"Age: \" + myObj.age); } }","title":"Multiple Objects and Attributes"},{"location":"Programming/Java/java_basics/#java-methods","text":"Quote A method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions. Why use methods? To reuse code: define the code once, and use it many times. Os m\u00e9todos s\u00e3o declarados dentro das classes. Kinda like fun\u00e7\u00f5es em C. ```java title=\"M\u00e9todo em Java\" public class Main { static void myMethod() { System.out.println(\"I just got executed!\"); } public static void main(String[] args) { myMethod(); } } // Outputs \"I just got executed!\" ### Method Parameters \u00c9 poss\u00edvel passar par\u00e2metros (argumentos) para m\u00e9todos, isto faz-se facilmente inserindo o par\u00e2metro a passar nos `()` do m\u00e9todo: !!! example ```java title=\"Passagem de Par\u00e2metros\" public class Main { static void myMethod(String fname) { System.out.println(fname + \" Refsnes\"); } public static void main(String[] args) { myMethod(\"Liam\"); myMethod(\"Jenny\"); myMethod(\"Anja\"); } } // Liam Refsnes // Jenny Refsnes // Anja Refsnes","title":"Java Methods"},{"location":"Programming/Java/java_index/","text":"Java Basics Java OOP Slides da Prof","title":"Java index"},{"location":"Programming/Java/java_oop/","text":"Quote OOP stands for Object-Oriented Programming. Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods. Object-oriented programming has several advantages over procedural programming: OOP is faster and easier to execute OOP provides a clear structure for the programs OOP helps to keep the Java code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug OOP makes it possible to create full reusable applications with less code and shorter development time Tip The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it. Static VS Non-Static \u00b6 Static: N\u00e3o precisa de um objeto para chamar o m\u00e9todo. Non-Static: Precisa de ser chamado por um objeto, posteriormente criado. public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would compile an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method on the object } } Java Constructors \u00b6 Um consctructor \u00e9 usado para inicializar objetos. Ou seja, quando criamos um objeto com: ```java title=\"\" Main myObj = new Main(); Temos tamb\u00e9m que criar o construtor para este, exemplo: ```java title=\"\" // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } Warning Note that the constructor name must match the class name, and it cannot have a return type (like void). Also note that the constructor is called when the object is created. All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes. Example public class Main { int modelYear; String modelName; public Main(int year, String name) { modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, \"Mustang\"); System.out.println(myCar.modelYear + \" \" + myCar.modelName); } } // Outputs 1969 Mustang Java Modifiers \u00b6 Access Modifiers - controls the access level Non-Access Modifiers - do not control access level, but provides other functionality Access Modifiers \u00b6 Para classes : Modificador Descri\u00e7\u00e3o public A class \u00e9 alcan\u00e7\u00e1vel por todas as classes default A class s\u00f3 \u00e9 alcan\u00e7\u00e1vel por classes que estejam no mesmo package Para atributos , m\u00e9todos e construtores : Modificador Descri\u00e7\u00e3o public O c\u00f3digo \u00e9 alcan\u00e7avel por todas as classes private O c\u00f3digo s\u00f3 \u00e9 acedido dentro da classe que o declarou default O c\u00f3digo \u00e9 alcan\u00e7avel dentro do mesmo package protected O c\u00f3digo \u00e9 alcan\u00e7\u00e1vel dentro do mesmo package e subclasses Non-Access Modifiers \u00b6 Para classes : Modificador Descri\u00e7\u00e3o final A class n\u00e3o pode ser herdada por outras classes, ou seja, se fizermos extend dessa classe vai dar erro. abstract Uma classe que n\u00e3o pode criar objetos. Para atributos , m\u00e9todos e construtores : Modificador Descri\u00e7\u00e3o final Atributos e m\u00e9todos n\u00e3o podem ser modificados/overriden static Atributos e m\u00e9todos pertencem \u00e0 class e n\u00e3o ao objeto abstract S\u00f3 podem ser usados numa class do tipo abstract . S\u00f3 podem ser usados em m\u00e9todos. O m\u00e9todo n\u00e3o tem \"corpo\", este \u00e9 definido nas subclasses da class abstract . Existem ainda transient , syncronized e volatile , por\u00e9m isto n\u00e3o foi muito falado em aula nem usado em nenhum exerc\u00edcio/lab e usam threads, coisa que n\u00e3o foi falada em POO tb. Os 3 fields mencionados acima Modificador Descri\u00e7\u00e3o transient Attributes and methods are skipped when serializing the object containing them synchronized Methods can only be accessed by one thread at a time volatile The value of an attribute is not cached thread-locally, and is always read from the \"main memory\" Exemplos \u00b6 Final ```java public class Main { final int x = 10; final double PI = 3.14; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 50; // will generate an error: cannot assign a value to a final variable myObj.PI = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } ``` Static ```java public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Text Only 1 2 Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } } ``` Abstract ```java // Code from filename: Main.java // abstract class abstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); Text Only 1 2 3 4 System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } } ``` Encapsulation \u00b6 Encapsulation serve para esconder \"sensitive\" data ao utilizador. Para isto devemos: Declarar as vari\u00e1veis/atributos da classe private . Aceder e atualizar valores de vari\u00e1veis private recorrendo aos m\u00e9todos get() e set() . Get and Set \u00b6 Getter - retorna o valor de um atributo/vari\u00e1vel sem mudar o valor. Setter - atualiza/muda o valor de um atributo/vari\u00e1vel. person.java main.java (erro) main.java (correct) ```java public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } ``` java hl_lines=\"4 5\" public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.name = \"John\"; //error (1) System.out.println(myObj.name); // error //as the name variable is declared as private, we cannot access it from outside this class } } ```java hl_lines=\"4 5\" public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.setName(\"John\"); // Set the value of the name variable to \"John\" System.out.println(myObj.getName()); } } // Outputs \"John\" ``` Porqu\u00ea Encapsulation? Better control of class attributes and methods Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method) Flexible: the programmer can change one part of the code without affecting other parts Increased security of data Java Packages \u00b6 Um package em Java \u00e9 utilizado para \"guardar\" classes semelhantes no mesmo s\u00edtio. Existem packeges pr\u00e9-feitos pela Oracle, que podem ser encontrados aqui . Podemos importar classes especificas ou o package inteiro: import package.name.Class; // Import a single class import package.name.*; // Import the whole package import java.util.Scanner; No exemplo acima java.util \u00e9 o package e Scanner \u00e9 a class . Creating a package \u00b6 \u2514\u2500\u2500 root \u2514\u2500\u2500 mypack \u2514\u2500\u2500 MyPackageClass.java ```java title=\"MyPackageClass.java\" package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package!\"); } } #### Compiling with a package 1. Compilar o .java 2. Compilar o package 3. Correr Ou seja: 1. `C:\\Users\\Your Name>javac MyPackageClass.java` 2. `C:\\Users\\Your Name>javac -d . MyPackageClass.java` 3. `C:\\Users\\Your Name>java mypack.MyPackageClass` O output seria: `This is my package!`. ## Java Inheritance Em Java \u00e9 poss\u00edvel que uma classe herde atributos e m\u00e9todos de outra, criando assim uma hierarquia. Podemos separar a hierarquia em dois tipos de classes: * **subclass** - class que herda os atributos e m\u00e9todos * **superclass** - class d\u00e1 heran\u00e7a Para uma classe herdar de outra usa-se o `extends`. ???+ example \"Heran\u00e7a\" ```java class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut!\"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } } ``` ## Java Polymorphism O polimorfismo acontece quando temos v\u00e1rias classes relacionadas umas com as outras hierarquicamente. Por exemplo, uma superclass chamada `Animal` que tem subclasses como `Porco`, `Gato`, etc. Todos os animais t\u00eam um `animalSound()` distinto entre eles. ```java title=\"Polimorfismo\" class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } class Main { public static void main(String[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } } Java Abstraction \u00b6 Basicamente \u00e9 a cena das classes poderem levar o modificador abstract . Por exemplo, um ve\u00edculo \u00e9 uma \"coisa\" abstrata, mas todos os ve\u00edculos t\u00eam por exemplo uma velocidadeMedia() etc. // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\"Zzz\"); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } Java Interfaces \u00b6 Usar interfaces \u00e9 outra maneira de criar abstra\u00e7\u00e3o em Java. Uma interface \u00e9 uma classe \"completely abstract\" usada para agrupar m\u00e9todos sem corpo. Interface java title=\"Interface\" // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void run(); // interface method (does not have a body) } Para uma classe aceder aos m\u00e9todos de uma interface usa-se o implements . implements ```java // Interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } ``` Note Interfaces n\u00e3o podem criar objetos, uma vez que s\u00e3o classes abstract . Os m\u00e9todos das interfaces n\u00e3o t\u00eam corpo, este \u00e9 posteriormente definido pelas classes que fazem o implements da interface. Os m\u00e9todos de uma interface s\u00e3o public e abstract . Os atributos de uma interface s\u00e3o public , static e final . Uma interface n\u00e3o tem constructor, uma vez que n\u00e3o cria objetos. Exemplo com m\u00faltiplas interfaces ```java interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class Main { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } ``` Enum \u00b6 ```java title=\"Enum example\" public class Main { enum Level { LOW, MEDIUM, HIGH } public static void main(String[] args) { Level myVar = Level.MEDIUM; System.out.println(myVar); } } !!! warning Os valores de um `enum` s\u00e3o constantes e imut\u00e1veis, como se fossem definidos com o modificador `final`. ??? example \"Switch-Case Enum\" ```java enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { Level myVar = Level.MEDIUM; switch(myVar) { case LOW: System.out.println(\"Low level\"); break; case MEDIUM: System.out.println(\"Medium level\"); break; case HIGH: System.out.println(\"High level\"); break; } } } ``` ??? example \"For each Enum\" ```java for (Level myVar : Level.values()) { System.out.println(myVar); } ``` ## User Input ??? example \"User Input\" ```java import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter name, age and salary:\"); // String input String name = myObj.nextLine(); // Numerical input int age = myObj.nextInt(); double salary = myObj.nextDouble(); // Output input by user System.out.println(\"Name: \" + name); System.out.println(\"Age: \" + age); System.out.println(\"Salary: \" + salary); } } ``` ## ArrayList Uma `ArrayList` \u00e9 um array mas \"resizable\" que pertence ao package java.util. A diferen\u00e7a entre um array dito normal e um ArrayList \u00e9 q o tamanho de um array normal n\u00e3o pode ser modificado, se queremos meter mais um elemento no array temos de fazer um novo, copiar o array antigo e meter outro elemento na ultima posi\u00e7\u00e3o por exemplo. No caso do ArrayList podemos adicionar ou remover elementos sem problema. !!! warning \"A syntax \u00e9 diferente que num array normal!\" ```java title=\"Uma `ArrayList` que vai guardar strings\" import java.util.ArrayList; // import the ArrayList class ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object Adicionar elementos \u00b6 add( ) ```java import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } ``` Aceder a um elemento por index \u00b6 get( ) cars.get(0); Modificar elementos numa ArrayList \u00b6 set( ) cars.set(0, \"Opel\"); Remover um elemento da ArrayList \u00b6 remove( ) cars.remove(0); Remover todos os elementos da ArrayList \u00b6 clear( ) cars.clear(); Tamanho de uma ArrayList \u00b6 cars.size() Loop de uma ArrayList \u00b6 ```java title=\"For\" hl_lines=\"8 9 10\" public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (int i = 0; i < cars.size(); i++) { System.out.println(cars.get(i)); } } } Tamb\u00e9m se pode usar o For-Each ```java title=\"For-Each\" hl_lines=\"8 9 10\" public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } } Sort ArrayList \u00b6 Existe uma class no package java.util chamada Collections que inclui a funcionalidade sort() e que pode ser usada numa ArrayList, ordenando-a alfabeticamente ou numericamente. Sort( ) ```java title=\"Sort alfabeticamente\" import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } ``` ```java title=\"Sort Numericamente\" import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList myNumbers = new ArrayList (); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Text Only 1 2 3 4 5 Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } ``` LinkedList \u00b6 Uma LinkedList \u00e9 muito parecida a uma ArrayList (at\u00e9 porque usam a mesma interface List ) porem s\u00e3o construidas de formas muito diferentes. Uma ArrayList tem um array normal dentro dela. Uma LinkedList guarda os seus item dentro de \"containers\". A List tem um link para o primeiro container, e cada container tem um link para o pr\u00f3ximo. Tipo nodes em AED. Normalmente a ArrayList \u00e9 mais eficiente uma vez que o seu uso foca-se mais em aceder a index's random da lista, mas a LinkedList tem m\u00e9todos mais eficientes para alguns casos: M\u00e9todo Descri\u00e7\u00e3o addFirst() Adiciona um item ao inicio da lista addLast() Adiciona um item ao fim da lista removeFirst() Remove um item do inicio da lista removeLast() Remove um item do fim da lista getFirst() Obt\u00e9m o primeiro item da lista getLast() Obt\u00e9m o ultimo item da lista !!!*** tip \"Quando usar?\" Usa-se a ArrayList para guardar e aceder a dados, e a LinkedList para manipular dados. Example ```java import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList cars = new LinkedList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Text Only 1 2 3 4 // Use getLast() to display the last item in the list System.out.println(cars.getFirst()); //Output: Volvo cars.addFirst(\"Hola\"); System.out.println(cars.getFirst()); //Output: Hola } } ```","title":"Java oop"},{"location":"Programming/Java/java_oop/#static-vs-non-static","text":"Static: N\u00e3o precisa de um objeto para chamar o m\u00e9todo. Non-Static: Precisa de ser chamado por um objeto, posteriormente criado. public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would compile an error Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method on the object } }","title":"Static VS Non-Static"},{"location":"Programming/Java/java_oop/#java-constructors","text":"Um consctructor \u00e9 usado para inicializar objetos. Ou seja, quando criamos um objeto com: ```java title=\"\" Main myObj = new Main(); Temos tamb\u00e9m que criar o construtor para este, exemplo: ```java title=\"\" // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } Warning Note that the constructor name must match the class name, and it cannot have a return type (like void). Also note that the constructor is called when the object is created. All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes. Example public class Main { int modelYear; String modelName; public Main(int year, String name) { modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, \"Mustang\"); System.out.println(myCar.modelYear + \" \" + myCar.modelName); } } // Outputs 1969 Mustang","title":"Java Constructors"},{"location":"Programming/Java/java_oop/#java-modifiers","text":"Access Modifiers - controls the access level Non-Access Modifiers - do not control access level, but provides other functionality","title":"Java Modifiers"},{"location":"Programming/Java/java_oop/#access-modifiers","text":"Para classes : Modificador Descri\u00e7\u00e3o public A class \u00e9 alcan\u00e7\u00e1vel por todas as classes default A class s\u00f3 \u00e9 alcan\u00e7\u00e1vel por classes que estejam no mesmo package Para atributos , m\u00e9todos e construtores : Modificador Descri\u00e7\u00e3o public O c\u00f3digo \u00e9 alcan\u00e7avel por todas as classes private O c\u00f3digo s\u00f3 \u00e9 acedido dentro da classe que o declarou default O c\u00f3digo \u00e9 alcan\u00e7avel dentro do mesmo package protected O c\u00f3digo \u00e9 alcan\u00e7\u00e1vel dentro do mesmo package e subclasses","title":"Access Modifiers"},{"location":"Programming/Java/java_oop/#non-access-modifiers","text":"Para classes : Modificador Descri\u00e7\u00e3o final A class n\u00e3o pode ser herdada por outras classes, ou seja, se fizermos extend dessa classe vai dar erro. abstract Uma classe que n\u00e3o pode criar objetos. Para atributos , m\u00e9todos e construtores : Modificador Descri\u00e7\u00e3o final Atributos e m\u00e9todos n\u00e3o podem ser modificados/overriden static Atributos e m\u00e9todos pertencem \u00e0 class e n\u00e3o ao objeto abstract S\u00f3 podem ser usados numa class do tipo abstract . S\u00f3 podem ser usados em m\u00e9todos. O m\u00e9todo n\u00e3o tem \"corpo\", este \u00e9 definido nas subclasses da class abstract . Existem ainda transient , syncronized e volatile , por\u00e9m isto n\u00e3o foi muito falado em aula nem usado em nenhum exerc\u00edcio/lab e usam threads, coisa que n\u00e3o foi falada em POO tb. Os 3 fields mencionados acima Modificador Descri\u00e7\u00e3o transient Attributes and methods are skipped when serializing the object containing them synchronized Methods can only be accessed by one thread at a time volatile The value of an attribute is not cached thread-locally, and is always read from the \"main memory\"","title":"Non-Access Modifiers"},{"location":"Programming/Java/java_oop/#exemplos","text":"Final ```java public class Main { final int x = 10; final double PI = 3.14; public static void main(String[] args) { Main myObj = new Main(); myObj.x = 50; // will generate an error: cannot assign a value to a final variable myObj.PI = 25; // will generate an error: cannot assign a value to a final variable System.out.println(myObj.x); } } ``` Static ```java public class Main { // Static method static void myStaticMethod() { System.out.println(\"Static methods can be called without creating objects\"); } // Public method public void myPublicMethod() { System.out.println(\"Public methods must be called by creating objects\"); } // Main method public static void main(String[ ] args) { myStaticMethod(); // Call the static method // myPublicMethod(); This would output an error Text Only 1 2 Main myObj = new Main(); // Create an object of Main myObj.myPublicMethod(); // Call the public method } } ``` Abstract ```java // Code from filename: Main.java // abstract class abstract class Main { public String fname = \"John\"; public int age = 24; public abstract void study(); // abstract method } // Subclass (inherit from Main) class Student extends Main { public int graduationYear = 2018; public void study() { // the body of the abstract method is provided here System.out.println(\"Studying all day long\"); } } // End code from filename: Main.java // Code from filename: Second.java class Second { public static void main(String[] args) { // create an object of the Student class (which inherits attributes and methods from Main) Student myObj = new Student(); Text Only 1 2 3 4 System.out.println(\"Name: \" + myObj.fname); System.out.println(\"Age: \" + myObj.age); System.out.println(\"Graduation Year: \" + myObj.graduationYear); myObj.study(); // call abstract method } } ```","title":"Exemplos"},{"location":"Programming/Java/java_oop/#encapsulation","text":"Encapsulation serve para esconder \"sensitive\" data ao utilizador. Para isto devemos: Declarar as vari\u00e1veis/atributos da classe private . Aceder e atualizar valores de vari\u00e1veis private recorrendo aos m\u00e9todos get() e set() .","title":"Encapsulation"},{"location":"Programming/Java/java_oop/#get-and-set","text":"Getter - retorna o valor de um atributo/vari\u00e1vel sem mudar o valor. Setter - atualiza/muda o valor de um atributo/vari\u00e1vel. person.java main.java (erro) main.java (correct) ```java public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } ``` java hl_lines=\"4 5\" public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.name = \"John\"; //error (1) System.out.println(myObj.name); // error //as the name variable is declared as private, we cannot access it from outside this class } } ```java hl_lines=\"4 5\" public class Main { public static void main(String[] args) { Person myObj = new Person(); myObj.setName(\"John\"); // Set the value of the name variable to \"John\" System.out.println(myObj.getName()); } } // Outputs \"John\" ``` Porqu\u00ea Encapsulation? Better control of class attributes and methods Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method) Flexible: the programmer can change one part of the code without affecting other parts Increased security of data","title":"Get and Set"},{"location":"Programming/Java/java_oop/#java-packages","text":"Um package em Java \u00e9 utilizado para \"guardar\" classes semelhantes no mesmo s\u00edtio. Existem packeges pr\u00e9-feitos pela Oracle, que podem ser encontrados aqui . Podemos importar classes especificas ou o package inteiro: import package.name.Class; // Import a single class import package.name.*; // Import the whole package import java.util.Scanner; No exemplo acima java.util \u00e9 o package e Scanner \u00e9 a class .","title":"Java Packages"},{"location":"Programming/Java/java_oop/#creating-a-package","text":"\u2514\u2500\u2500 root \u2514\u2500\u2500 mypack \u2514\u2500\u2500 MyPackageClass.java ```java title=\"MyPackageClass.java\" package mypack; class MyPackageClass { public static void main(String[] args) { System.out.println(\"This is my package!\"); } } #### Compiling with a package 1. Compilar o .java 2. Compilar o package 3. Correr Ou seja: 1. `C:\\Users\\Your Name>javac MyPackageClass.java` 2. `C:\\Users\\Your Name>javac -d . MyPackageClass.java` 3. `C:\\Users\\Your Name>java mypack.MyPackageClass` O output seria: `This is my package!`. ## Java Inheritance Em Java \u00e9 poss\u00edvel que uma classe herde atributos e m\u00e9todos de outra, criando assim uma hierarquia. Podemos separar a hierarquia em dois tipos de classes: * **subclass** - class que herda os atributos e m\u00e9todos * **superclass** - class d\u00e1 heran\u00e7a Para uma classe herdar de outra usa-se o `extends`. ???+ example \"Heran\u00e7a\" ```java class Vehicle { protected String brand = \"Ford\"; // Vehicle attribute public void honk() { // Vehicle method System.out.println(\"Tuut, tuut!\"); } } class Car extends Vehicle { private String modelName = \"Mustang\"; // Car attribute public static void main(String[] args) { // Create a myCar object Car myCar = new Car(); // Call the honk() method (from the Vehicle class) on the myCar object myCar.honk(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(myCar.brand + \" \" + myCar.modelName); } } ``` ## Java Polymorphism O polimorfismo acontece quando temos v\u00e1rias classes relacionadas umas com as outras hierarquicamente. Por exemplo, uma superclass chamada `Animal` que tem subclasses como `Porco`, `Gato`, etc. Todos os animais t\u00eam um `animalSound()` distinto entre eles. ```java title=\"Polimorfismo\" class Animal { public void animalSound() { System.out.println(\"The animal makes a sound\"); } } class Pig extends Animal { public void animalSound() { System.out.println(\"The pig says: wee wee\"); } } class Dog extends Animal { public void animalSound() { System.out.println(\"The dog says: bow wow\"); } } class Main { public static void main(String[] args) { Animal myAnimal = new Animal(); // Create a Animal object Animal myPig = new Pig(); // Create a Pig object Animal myDog = new Dog(); // Create a Dog object myAnimal.animalSound(); myPig.animalSound(); myDog.animalSound(); } }","title":"Creating a package"},{"location":"Programming/Java/java_oop/#java-abstraction","text":"Basicamente \u00e9 a cena das classes poderem levar o modificador abstract . Por exemplo, um ve\u00edculo \u00e9 uma \"coisa\" abstrata, mas todos os ve\u00edculos t\u00eam por exemplo uma velocidadeMedia() etc. // Abstract class abstract class Animal { // Abstract method (does not have a body) public abstract void animalSound(); // Regular method public void sleep() { System.out.println(\"Zzz\"); } } // Subclass (inherit from Animal) class Pig extends Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } }","title":"Java Abstraction"},{"location":"Programming/Java/java_oop/#java-interfaces","text":"Usar interfaces \u00e9 outra maneira de criar abstra\u00e7\u00e3o em Java. Uma interface \u00e9 uma classe \"completely abstract\" usada para agrupar m\u00e9todos sem corpo. Interface java title=\"Interface\" // interface interface Animal { public void animalSound(); // interface method (does not have a body) public void run(); // interface method (does not have a body) } Para uma classe aceder aos m\u00e9todos de uma interface usa-se o implements . implements ```java // Interface interface Animal { public void animalSound(); // interface method (does not have a body) public void sleep(); // interface method (does not have a body) } // Pig \"implements\" the Animal interface class Pig implements Animal { public void animalSound() { // The body of animalSound() is provided here System.out.println(\"The pig says: wee wee\"); } public void sleep() { // The body of sleep() is provided here System.out.println(\"Zzz\"); } } class Main { public static void main(String[] args) { Pig myPig = new Pig(); // Create a Pig object myPig.animalSound(); myPig.sleep(); } } ``` Note Interfaces n\u00e3o podem criar objetos, uma vez que s\u00e3o classes abstract . Os m\u00e9todos das interfaces n\u00e3o t\u00eam corpo, este \u00e9 posteriormente definido pelas classes que fazem o implements da interface. Os m\u00e9todos de uma interface s\u00e3o public e abstract . Os atributos de uma interface s\u00e3o public , static e final . Uma interface n\u00e3o tem constructor, uma vez que n\u00e3o cria objetos. Exemplo com m\u00faltiplas interfaces ```java interface FirstInterface { public void myMethod(); // interface method } interface SecondInterface { public void myOtherMethod(); // interface method } class DemoClass implements FirstInterface, SecondInterface { public void myMethod() { System.out.println(\"Some text..\"); } public void myOtherMethod() { System.out.println(\"Some other text...\"); } } class Main { public static void main(String[] args) { DemoClass myObj = new DemoClass(); myObj.myMethod(); myObj.myOtherMethod(); } } ```","title":"Java Interfaces"},{"location":"Programming/Java/java_oop/#enum","text":"```java title=\"Enum example\" public class Main { enum Level { LOW, MEDIUM, HIGH } public static void main(String[] args) { Level myVar = Level.MEDIUM; System.out.println(myVar); } } !!! warning Os valores de um `enum` s\u00e3o constantes e imut\u00e1veis, como se fossem definidos com o modificador `final`. ??? example \"Switch-Case Enum\" ```java enum Level { LOW, MEDIUM, HIGH } public class Main { public static void main(String[] args) { Level myVar = Level.MEDIUM; switch(myVar) { case LOW: System.out.println(\"Low level\"); break; case MEDIUM: System.out.println(\"Medium level\"); break; case HIGH: System.out.println(\"High level\"); break; } } } ``` ??? example \"For each Enum\" ```java for (Level myVar : Level.values()) { System.out.println(myVar); } ``` ## User Input ??? example \"User Input\" ```java import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); System.out.println(\"Enter name, age and salary:\"); // String input String name = myObj.nextLine(); // Numerical input int age = myObj.nextInt(); double salary = myObj.nextDouble(); // Output input by user System.out.println(\"Name: \" + name); System.out.println(\"Age: \" + age); System.out.println(\"Salary: \" + salary); } } ``` ## ArrayList Uma `ArrayList` \u00e9 um array mas \"resizable\" que pertence ao package java.util. A diferen\u00e7a entre um array dito normal e um ArrayList \u00e9 q o tamanho de um array normal n\u00e3o pode ser modificado, se queremos meter mais um elemento no array temos de fazer um novo, copiar o array antigo e meter outro elemento na ultima posi\u00e7\u00e3o por exemplo. No caso do ArrayList podemos adicionar ou remover elementos sem problema. !!! warning \"A syntax \u00e9 diferente que num array normal!\" ```java title=\"Uma `ArrayList` que vai guardar strings\" import java.util.ArrayList; // import the ArrayList class ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object","title":"Enum"},{"location":"Programming/Java/java_oop/#adicionar-elementos","text":"add( ) ```java import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); System.out.println(cars); } } ```","title":"Adicionar elementos"},{"location":"Programming/Java/java_oop/#aceder-a-um-elemento-por-index","text":"get( ) cars.get(0);","title":"Aceder a um elemento por index"},{"location":"Programming/Java/java_oop/#modificar-elementos-numa-arraylist","text":"set( ) cars.set(0, \"Opel\");","title":"Modificar elementos numa ArrayList"},{"location":"Programming/Java/java_oop/#remover-um-elemento-da-arraylist","text":"remove( ) cars.remove(0);","title":"Remover um elemento da ArrayList"},{"location":"Programming/Java/java_oop/#remover-todos-os-elementos-da-arraylist","text":"clear( ) cars.clear();","title":"Remover todos os elementos da ArrayList"},{"location":"Programming/Java/java_oop/#tamanho-de-uma-arraylist","text":"cars.size()","title":"Tamanho de uma ArrayList"},{"location":"Programming/Java/java_oop/#loop-de-uma-arraylist","text":"```java title=\"For\" hl_lines=\"8 9 10\" public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (int i = 0; i < cars.size(); i++) { System.out.println(cars.get(i)); } } } Tamb\u00e9m se pode usar o For-Each ```java title=\"For-Each\" hl_lines=\"8 9 10\" public class Main { public static void main(String[] args) { ArrayList<String> cars = new ArrayList<String>(); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); for (String i : cars) { System.out.println(i); } } }","title":"Loop de uma ArrayList"},{"location":"Programming/Java/java_oop/#sort-arraylist","text":"Existe uma class no package java.util chamada Collections que inclui a funcionalidade sort() e que pode ser usada numa ArrayList, ordenando-a alfabeticamente ou numericamente. Sort( ) ```java title=\"Sort alfabeticamente\" import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList cars = new ArrayList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Collections.sort(cars); // Sort cars for (String i : cars) { System.out.println(i); } } } ``` ```java title=\"Sort Numericamente\" import java.util.ArrayList; import java.util.Collections; // Import the Collections class public class Main { public static void main(String[] args) { ArrayList myNumbers = new ArrayList (); myNumbers.add(33); myNumbers.add(15); myNumbers.add(20); myNumbers.add(34); myNumbers.add(8); myNumbers.add(12); Text Only 1 2 3 4 5 Collections.sort(myNumbers); // Sort myNumbers for (int i : myNumbers) { System.out.println(i); } } } ```","title":"Sort ArrayList"},{"location":"Programming/Java/java_oop/#linkedlist","text":"Uma LinkedList \u00e9 muito parecida a uma ArrayList (at\u00e9 porque usam a mesma interface List ) porem s\u00e3o construidas de formas muito diferentes. Uma ArrayList tem um array normal dentro dela. Uma LinkedList guarda os seus item dentro de \"containers\". A List tem um link para o primeiro container, e cada container tem um link para o pr\u00f3ximo. Tipo nodes em AED. Normalmente a ArrayList \u00e9 mais eficiente uma vez que o seu uso foca-se mais em aceder a index's random da lista, mas a LinkedList tem m\u00e9todos mais eficientes para alguns casos: M\u00e9todo Descri\u00e7\u00e3o addFirst() Adiciona um item ao inicio da lista addLast() Adiciona um item ao fim da lista removeFirst() Remove um item do inicio da lista removeLast() Remove um item do fim da lista getFirst() Obt\u00e9m o primeiro item da lista getLast() Obt\u00e9m o ultimo item da lista !!!*** tip \"Quando usar?\" Usa-se a ArrayList para guardar e aceder a dados, e a LinkedList para manipular dados. Example ```java import java.util.LinkedList; public class Main { public static void main(String[] args) { LinkedList cars = new LinkedList (); cars.add(\"Volvo\"); cars.add(\"BMW\"); cars.add(\"Ford\"); cars.add(\"Mazda\"); Text Only 1 2 3 4 // Use getLast() to display the last item in the list System.out.println(cars.getFirst()); //Output: Volvo cars.addFirst(\"Hola\"); System.out.println(cars.getFirst()); //Output: Hola } } ```","title":"LinkedList"},{"location":"Programming/Linux/","text":"Introdu\u00e7\u00e3o \u00b6 Nesta p\u00e1gina bla bla bla linux intro fancy Hist\u00f3ria e curiosidades do Linux: \u00b6 No in\u00edcio, o Linux era um projeto pessoal iniciado em 1991 por um estudante finland\u00eas chamado Linus Torvalds . O seu objetivo era criar um kernel novo para um sistema operacional open-source . Ao longo dos anos, o kernel Linux passou de um pequeno n\u00famero de arquivos escritos em C para a vers\u00e3o mais recente com mais de 23 milh\u00f5es de linhas de c\u00f3digo fonte (exclu\u00eddos os coment\u00e1rios). O Linux est\u00e1 dispon\u00edvel em mais de 600 distribui\u00e7\u00f5es (ou \" distros \"). Alguns dos mais populares e conhecidos s\u00e3o Ubuntu, Debian, Fedora, OpenSUSE, Elementary, Manjaro, Gentoo Linux, RedHat e Linux Mint. O Linux \u00e9 considerado mais seguro comparativamente a outros sistemas operativos uma vez que \u00e9 menos suscet\u00edvel a malware que o Windows e recebe updates frequentemente. Em contrapartida o Linux n\u00e3o tem tantos hardware drivers como o Windows. Filosofia \u00b6 O Linux tem 5 princ\u00edpios core : Principio Descris\u00e3o Tudo \u00e9 um ficheiro Todos os arquivos de configura\u00e7\u00e3o dos v\u00e1rios servi\u00e7os executados no sistema operacional Linux s\u00e3o armazenados em um ou mais arquivos de texto. Programas pequenos e de prop\u00f3sito \u00fanico O Linux oferece muitas ferramentas diferentes, que podem ser combinadas para trabalhar em conjunto. Capacidade de encadear programas para executar tarefas complexas A integra\u00e7\u00e3o e combina\u00e7\u00e3o de diferentes ferramentas permite-nos realizar muitas tarefas grandes e complexas, como processar ou filtrar resultados de dados espec\u00edficos Evita user interfaces O Linux est\u00e1 desenhado para trabalhar principalmente atrav\u00e9s do terminal Configura\u00e7\u00f5es s\u00e3o guardadas em ficheiros de texto Um exemplo deste tipo de arquivo \u00e9 o /etc/passwd, que armazena configura\u00e7\u00f5es de users do sistema. Arquitetura Linux \u00b6 O SO Linux pode ser repartido nas seguintes camadas: Filesystem Hierarchy Standard (FHS) \u00b6 A estrutura Linux assemelha-se a uma \"\u00e1rvore hier\u00e1rquica\":","title":"Index"},{"location":"Programming/Linux/#introducao","text":"Nesta p\u00e1gina bla bla bla linux intro fancy","title":"Introdu\u00e7\u00e3o"},{"location":"Programming/Linux/#historia-e-curiosidades-do-linux","text":"No in\u00edcio, o Linux era um projeto pessoal iniciado em 1991 por um estudante finland\u00eas chamado Linus Torvalds . O seu objetivo era criar um kernel novo para um sistema operacional open-source . Ao longo dos anos, o kernel Linux passou de um pequeno n\u00famero de arquivos escritos em C para a vers\u00e3o mais recente com mais de 23 milh\u00f5es de linhas de c\u00f3digo fonte (exclu\u00eddos os coment\u00e1rios). O Linux est\u00e1 dispon\u00edvel em mais de 600 distribui\u00e7\u00f5es (ou \" distros \"). Alguns dos mais populares e conhecidos s\u00e3o Ubuntu, Debian, Fedora, OpenSUSE, Elementary, Manjaro, Gentoo Linux, RedHat e Linux Mint. O Linux \u00e9 considerado mais seguro comparativamente a outros sistemas operativos uma vez que \u00e9 menos suscet\u00edvel a malware que o Windows e recebe updates frequentemente. Em contrapartida o Linux n\u00e3o tem tantos hardware drivers como o Windows.","title":"Hist\u00f3ria e curiosidades do Linux:"},{"location":"Programming/Linux/#filosofia","text":"O Linux tem 5 princ\u00edpios core : Principio Descris\u00e3o Tudo \u00e9 um ficheiro Todos os arquivos de configura\u00e7\u00e3o dos v\u00e1rios servi\u00e7os executados no sistema operacional Linux s\u00e3o armazenados em um ou mais arquivos de texto. Programas pequenos e de prop\u00f3sito \u00fanico O Linux oferece muitas ferramentas diferentes, que podem ser combinadas para trabalhar em conjunto. Capacidade de encadear programas para executar tarefas complexas A integra\u00e7\u00e3o e combina\u00e7\u00e3o de diferentes ferramentas permite-nos realizar muitas tarefas grandes e complexas, como processar ou filtrar resultados de dados espec\u00edficos Evita user interfaces O Linux est\u00e1 desenhado para trabalhar principalmente atrav\u00e9s do terminal Configura\u00e7\u00f5es s\u00e3o guardadas em ficheiros de texto Um exemplo deste tipo de arquivo \u00e9 o /etc/passwd, que armazena configura\u00e7\u00f5es de users do sistema.","title":"Filosofia"},{"location":"Programming/Linux/#arquitetura-linux","text":"O SO Linux pode ser repartido nas seguintes camadas:","title":"Arquitetura Linux"},{"location":"Programming/Linux/#filesystem-hierarchy-standard-fhs","text":"A estrutura Linux assemelha-se a uma \"\u00e1rvore hier\u00e1rquica\":","title":"Filesystem Hierarchy Standard  (FHS)"},{"location":"Programming/Linux/cheatsheet/","text":"Command Description man <tool> Opens man pages for the specified tool. <tool> -h Prints the help page of the tool. apropos <keyword> Searches through man pages' descriptions for instances of a given keyword. cat Concatenate and print files. whoami Displays current username. id Returns users identity. hostname Sets or prints the name of the current host system. uname Prints operating system name. pwd Returns working directory name. ifconfig The ifconfig utility is used to assign or view an address to a network interface and/or configure network interface parameters. ip Ip is a utility to show or manipulate routing, network devices, interfaces, and tunnels. netstat Shows network status. ss Another utility to investigate sockets. ps Shows process status. who Displays who is logged in. env Prints environment or sets and executes a command. lsblk Lists block devices. lsusb Lists USB devices. lsof Lists opened files. lspci Lists PCI devices. sudo Execute command as a different user. su The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed. useradd Creates a new user or update default new user information. userdel Deletes a user account and related files. usermod Modifies a user account. addgroup Adds a group to the system. delgroup Removes a group from the system. passwd Changes user password. dpkg Install, remove and configure Debian-based packages. apt High-level package management command-line utility. aptitude Alternative to apt . snap Install, remove and configure snap packages. gem Standard package manager for Ruby. pip Standard package manager for Python. git Revision control system command-line utility. systemctl Command-line based service and systemd control manager. ps Prints a snapshot of the current processes. journalctl Query the systemd journal. kill Sends a signal to a process. bg Puts a process into background. jobs Lists all processes that are running in the background. fg Puts a process into the foreground. curl Command-line utility to transfer data from or to a server. wget An alternative to curl that downloads files from FTP or HTTP(s) server. python3 -m http.server Starts a Python3 web server on TCP port 8000. ls Lists directory contents. cd Changes the directory. clear Clears the terminal. touch Creates an empty file. mkdir Creates a directory. tree Lists the contents of a directory recursively. mv Move or rename files or directories. cp Copy files or directories. nano Terminal based text editor. which Returns the path to a file or link. find Searches for files in a directory hierarchy. updatedb Updates the locale database for existing contents on the system. locate Uses the locale database to find contents on the system. more Pager that is used to read STDOUT or files. less An alternative to more with more features. head Prints the first ten lines of STDOUT or a file. tail Prints the last ten lines of STDOUT or a file. sort Sorts the contents of STDOUT or a file. grep Searches for specific results that contain given patterns. cut Removes sections from each line of files. tr Replaces certain characters. column Command-line based utility that formats its input into multiple columns. awk Pattern scanning and processing language. sed A stream editor for filtering and transforming text. wc Prints newline, word, and byte counts for a given input. chmod Changes permission of a file or directory. chown Changes the owner and group of a file or directory.","title":"Cheatsheet"}]}